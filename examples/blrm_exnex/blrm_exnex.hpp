
// Code generated by stanc a9852998
#include <stan/model/model_header.hpp>
namespace blrm_exnex_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 793, column 2 to column 48)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 794, column 2 to column 42)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 797, column 2 to column 34)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 800, column 2 to column 59)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 801, column 2 to column 52)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 803, column 2 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 804, column 2 to column 53)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 805, column 2 to column 45)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 808, column 2 to column 40)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 809, column 2 to column 38)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 810, column 2 to column 55)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 811, column 2 to column 49)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 818, column 4 to column 36)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 819, column 4 to column 26)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 817, column 9 to line 820, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 815, column 4 to column 42)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 816, column 4 to column 38)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 814, column 27 to line 817, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 814, column 2 to line 820, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 824, column 4 to column 33)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 826, column 6 to line 827, column 85)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 825, column 25 to line 828, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 825, column 4 to line 828, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 830, column 6 to column 79)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 829, column 4 to line 830, column 79)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 823, column 25 to line 831, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 823, column 2 to line 831, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 834, column 2 to column 76)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 835, column 2 to column 70)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 840, column 6 to column 37)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 839, column 4 to line 840, column 37)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 838, column 2 to line 840, column 37)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 910, column 2 to column 43)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 911, column 2 to column 43)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 912, column 2 to column 44)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 913, column 2 to column 42)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 914, column 2 to column 35)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 915, column 2 to column 32)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 916, column 2 to column 93)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 919, column 4 to column 92)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 920, column 4 to column 47)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 918, column 23 to line 921, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 918, column 2 to line 921, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 925, column 4 to column 33)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 926, column 4 to column 38)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 927, column 17 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 927, column 4 to column 61)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 929, column 11 to column 23)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 929, column 4 to line 939, column 26)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 940, column 4 to column 42)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 941, column 11 to column 23)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 941, column 4 to column 63)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 942, column 4 to column 63)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 943, column 24 to column 32)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 943, column 4 to column 65)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 944, column 23 to column 32)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 944, column 4 to column 64)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 946, column 4 to column 32)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 950, column 6 to column 16)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 956, column 10 to column 34)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 955, column 15 to line 957, column 9)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 953, column 10 to column 83)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 954, column 10 to column 17)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 952, column 36 to line 955, column 9)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 952, column 8 to line 957, column 9)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 958, column 8 to column 81)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 951, column 27 to line 959, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 951, column 6 to line 959, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 949, column 4 to line 960, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 962, column 6 to column 16)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 968, column 10 to column 33)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 967, column 15 to line 969, column 9)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 965, column 10 to column 81)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 966, column 10 to column 17)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 964, column 37 to line 967, column 9)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 964, column 8 to line 969, column 9)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 970, column 8 to column 78)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 963, column 28 to line 971, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 963, column 6 to line 971, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 961, column 4 to line 972, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 924, column 25 to line 973, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 924, column 2 to line 973, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 843, column 2 to column 21)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 847, column 4 to column 33)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 848, column 4 to column 38)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 849, column 17 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 849, column 4 to column 61)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 852, column 13 to column 25)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 852, column 6 to line 865, column 30)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 868, column 6 to column 39)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 850, column 32 to line 869, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 850, column 4 to line 869, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 846, column 25 to line 870, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 846, column 2 to line 870, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 872, column 4 to column 22)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 871, column 2 to line 872, column 22)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 876, column 4 to column 84)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 877, column 4 to column 84)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 879, column 6 to column 118)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 880, column 6 to column 118)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 878, column 27 to line 881, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 878, column 4 to line 881, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 882, column 4 to column 70)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 875, column 23 to line 883, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 875, column 2 to line 883, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 885, column 2 to column 64)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 888, column 6 to column 109)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 887, column 4 to line 888, column 109)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 886, column 2 to line 888, column 109)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 889, column 2 to column 58)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 895, column 6 to column 39)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 894, column 4 to line 895, column 39)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 897, column 4 to column 30)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 893, column 25 to line 898, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 893, column 2 to line 898, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 904, column 6 to column 85)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 902, column 25 to line 905, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 902, column 4 to line 905, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 906, column 4 to column 72)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 901, column 38 to line 907, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 901, column 2 to line 907, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 539, column 2 to column 23)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 540, column 17 to column 24)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 540, column 2 to column 26)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 541, column 18 to column 25)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 541, column 2 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 544, column 2 to column 24)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 547, column 27 to column 35)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 547, column 9 to column 16)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 547, column 2 to column 37)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 550, column 2 to column 25)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 551, column 9 to column 16)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 551, column 17 to column 26)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 551, column 2 to column 36)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 556, column 21 to column 28)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 556, column 2 to column 30)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 559, column 23 to column 30)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 559, column 2 to column 32)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 562, column 2 to column 26)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 565, column 2 to column 26)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 568, column 50 to column 60)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 568, column 2 to column 62)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 571, column 43 to column 51)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 571, column 2 to column 53)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 572, column 44 to column 53)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 572, column 2 to column 55)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 579, column 29 to column 39)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 579, column 40 to column 48)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 579, column 2 to column 69)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 580, column 29 to column 39)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 580, column 40 to column 49)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 580, column 2 to column 71)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 583, column 34 to column 42)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 583, column 2 to column 44)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 584, column 41 to column 49)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 584, column 2 to column 51)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 585, column 35 to column 45)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 585, column 46 to column 54)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 585, column 2 to column 56)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 586, column 42 to column 52)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 586, column 53 to column 61)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 586, column 2 to column 63)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 587, column 39 to column 47)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 587, column 2 to column 49)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 588, column 9 to column 18)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 588, column 2 to column 43)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 589, column 18 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 589, column 2 to column 50)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 590, column 44 to column 54)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 590, column 9 to column 18)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 590, column 2 to column 56)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 591, column 51 to column 61)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 591, column 18 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 591, column 2 to column 63)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 592, column 2 to column 40)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 595, column 35 to column 43)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 595, column 2 to column 45)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 596, column 42 to column 50)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 596, column 2 to column 52)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 597, column 9 to column 18)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 597, column 2 to column 44)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 598, column 18 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 598, column 2 to column 51)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 604, column 2 to column 38)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 607, column 2 to column 32)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 610, column 17 to column 24)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 610, column 2 to column 26)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 611, column 34 to column 42)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 611, column 43 to column 50)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 611, column 2 to column 52)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 612, column 2 to column 72)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 613, column 2 to column 75)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 614, column 2 to column 62)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 615, column 2 to column 56)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 616, column 49 to column 63)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 616, column 64 to column 114)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 616, column 2 to column 116)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 617, column 48 to column 63)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 617, column 64 to column 114)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 617, column 2 to column 116)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 618, column 36 to column 48)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 618, column 49 to column 57)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 618, column 2 to column 59)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 619, column 36 to column 48)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 619, column 49 to column 58)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 619, column 2 to column 60)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 621, column 43 to column 53)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 621, column 2 to column 100)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 623, column 31 to column 41)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 623, column 2 to column 70)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 625, column 43 to column 53)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 625, column 54 to column 72)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 625, column 2 to column 121)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 626, column 47 to column 57)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 626, column 18 to column 30)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 626, column 2 to column 59)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 630, column 4 to column 14)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 633, column 8 to column 31)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 634, column 8 to column 18)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 632, column 24 to line 635, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 632, column 6 to line 635, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 631, column 25 to line 636, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 631, column 4 to line 636, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 629, column 26 to line 637, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 629, column 2 to line 637, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 642, column 4 to column 38)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 643, column 17 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 643, column 4 to column 61)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 645, column 6 to column 62)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 644, column 4 to line 645, column 62)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 641, column 25 to line 646, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 641, column 2 to line 646, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 650, column 6 to column 73)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 649, column 4 to line 650, column 73)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 648, column 23 to line 651, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 648, column 2 to line 651, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 655, column 6 to column 98)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 654, column 4 to line 655, column 98)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 653, column 2 to line 655, column 98)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 660, column 4 to column 24)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 659, column 2 to line 660, column 24)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 664, column 4 to column 38)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 665, column 17 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 665, column 4 to column 61)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 666, column 4 to column 42)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 663, column 25 to line 667, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 663, column 2 to line 667, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 670, column 23 to column 30)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 670, column 4 to column 56)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 673, column 8 to column 83)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 674, column 8 to column 64)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 672, column 26 to line 675, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 672, column 6 to line 675, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 671, column 25 to line 676, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 671, column 4 to line 676, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 679, column 8 to column 59)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 678, column 6 to line 679, column 59)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 677, column 24 to line 680, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 677, column 4 to line 680, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 669, column 2 to line 681, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 683, column 2 to column 42)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 684, column 2 to column 42)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 685, column 2 to column 101)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 686, column 2 to column 104)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 687, column 2 to column 100)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 689, column 2 to column 44)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 691, column 4 to column 66)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 690, column 25 to line 692, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 690, column 2 to line 692, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 694, column 2 to column 12)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 695, column 2 to column 40)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 697, column 4 to column 43)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 696, column 25 to line 698, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 696, column 2 to line 698, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 700, column 2 to column 49)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 706, column 4 to column 30)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 705, column 34 to line 707, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 705, column 9 to line 707, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 704, column 4 to column 24)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 703, column 34 to line 705, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 703, column 9 to line 707, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 702, column 4 to column 19)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 701, column 26 to line 703, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 701, column 2 to line 707, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 710, column 4 to column 64)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 709, column 2 to line 710, column 64)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 713, column 4 to column 54)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 712, column 2 to line 713, column 54)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 719, column 21 to column 32)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 719, column 4 to column 70)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 720, column 16 to column 36)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 720, column 4 to column 38)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 723, column 6 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 721, column 28 to line 724, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 721, column 4 to line 724, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 727, column 6 to column 16)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 735, column 10 to column 26)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 734, column 15 to line 736, column 9)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 732, column 10 to column 39)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 733, column 10 to column 17)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 731, column 36 to line 734, column 9)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 731, column 8 to line 736, column 9)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 728, column 27 to line 737, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 728, column 6 to line 737, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 726, column 4 to line 738, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 740, column 6 to column 16)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 748, column 10 to column 36)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 747, column 15 to line 749, column 9)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 745, column 10 to column 67)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 746, column 10 to column 17)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 744, column 37 to line 747, column 9)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 744, column 8 to line 749, column 9)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 741, column 28 to line 750, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 741, column 6 to line 750, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 739, column 4 to line 751, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 758, column 10 to column 113)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 757, column 8 to line 758, column 113)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 756, column 6 to line 758, column 113)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 761, column 10 to column 126)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 760, column 8 to line 761, column 126)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 759, column 6 to line 761, column 126)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 764, column 6 to column 44)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 765, column 6 to column 62)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 753, column 27 to line 766, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 753, column 4 to line 766, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 718, column 27 to line 767, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 718, column 2 to line 767, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 772, column 4 to column 14)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 775, column 8 to column 61)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 776, column 8 to column 15)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 774, column 34 to line 777, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 774, column 6 to line 777, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 773, column 25 to line 778, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 773, column 4 to line 778, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 771, column 2 to line 779, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 781, column 4 to column 14)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 784, column 8 to column 59)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 785, column 8 to column 15)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 783, column 35 to line 786, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 783, column 6 to line 786, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 782, column 26 to line 787, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 782, column 4 to line 787, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 780, column 2 to line 788, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 793, column 25 to column 37)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 793, column 38 to column 46)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 794, column 28 to column 40)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 794, column 9 to column 18)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 797, column 24 to column 32)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 800, column 38 to column 48)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 800, column 49 to column 57)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 801, column 42 to column 50)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 803, column 9 to column 18)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 804, column 41 to column 51)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 804, column 18 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 805, column 23 to column 32)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 808, column 17 to column 29)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 808, column 30 to column 38)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 809, column 24 to column 36)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 809, column 9 to column 18)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 810, column 34 to column 44)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 810, column 45 to column 53)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 811, column 37 to column 47)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 811, column 18 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 910, column 9 to column 19)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 910, column 20 to column 28)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 911, column 9 to column 19)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 911, column 20 to column 29)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 912, column 23 to column 33)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 912, column 34 to column 42)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 913, column 30 to column 40)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 913, column 9 to column 18)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 914, column 9 to column 19)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 915, column 9 to column 17)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 916, column 9 to column 18)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 916, column 19 to column 28)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 18, column 9 to column 18)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 18, column 2 to column 20)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 19, column 2 to column 13)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 20, column 2 to column 13)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 22, column 4 to column 19)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 23, column 4 to column 17)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 21, column 22 to line 24, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 21, column 2 to line 24, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 25, column 2 to column 13)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 17, column 32 to line 26, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 30, column 2 to column 12)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 33, column 6 to column 16)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 32, column 4 to line 33, column 16)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 31, column 32 to line 34, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 31, column 2 to line 34, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 35, column 2 to column 12)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 29, column 30 to line 36, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 40, column 2 to column 12)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 43, column 6 to column 16)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 42, column 4 to line 43, column 16)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 41, column 32 to line 44, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 41, column 2 to line 44, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 45, column 2 to column 12)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 39, column 38 to line 46, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 51, column 10 to column 29)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 51, column 2 to column 31)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 52, column 2 to column 12)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 53, column 2 to column 13)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 58, column 6 to column 16)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 59, column 6 to column 17)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 57, column 11 to line 60, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 56, column 6 to column 26)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 55, column 27 to line 57, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 55, column 4 to line 60, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 54, column 32 to line 61, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 54, column 2 to line 61, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 62, column 2 to column 14)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 50, column 25 to line 63, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 67, column 2 to column 30)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 68, column 16 to column 17)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 68, column 2 to column 57)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 70, column 2 to column 24)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 66, column 30 to line 71, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 78, column 2 to column 29)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 79, column 17 to column 18)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 79, column 2 to column 49)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 80, column 2 to column 26)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 83, column 6 to column 79)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 82, column 4 to line 83, column 79)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 81, column 18 to line 84, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 81, column 2 to line 84, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 77, column 35 to line 85, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 88, column 15 to column 21)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 88, column 2 to column 23)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 89, column 2 to column 24)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 91, column 4 to column 33)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 92, column 4 to column 29)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 90, column 21 to line 93, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 90, column 2 to line 93, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 94, column 2 to column 18)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 87, column 54 to line 95, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 97, column 36 to column 37)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 101, column 4 to column 88)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 100, column 2 to line 101, column 88)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 105, column 4 to column 49)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 103, column 4 to column 13)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 102, column 2 to line 105, column 49)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 99, column 37 to line 106, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 110, column 2 to column 41)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 109, column 33 to line 111, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 115, column 2 to column 48)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 114, column 37 to line 116, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 120, column 2 to column 26)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 121, column 10 to column 11)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 121, column 2 to column 13)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 122, column 16 to column 39)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 122, column 2 to column 39)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 123, column 2 to column 14)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 119, column 34 to line 124, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 129, column 2 to column 20)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 130, column 17 to column 18)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 130, column 2 to column 20)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 131, column 2 to column 12)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 134, column 4 to column 59)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 135, column 4 to column 20)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 133, column 24 to line 136, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 133, column 2 to line 136, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 138, column 2 to column 21)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 128, column 38 to line 139, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 152, column 2 to column 72)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 151, column 40 to line 153, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 160, column 10 to column 25)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 160, column 2 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 164, column 4 to column 62)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 163, column 30 to line 165, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 163, column 2 to line 165, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 166, column 2 to column 14)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 159, column 50 to line 167, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 172, column 2 to column 10)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 173, column 2 to column 8)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 174, column 2 to column 15)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 175, column 2 to column 12)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 176, column 2 to column 13)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 177, column 2 to column 15)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 178, column 2 to column 16)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 179, column 2 to column 11)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 181, column 2 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 183, column 13 to column 23)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 183, column 2 to column 23)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 185, column 2 to column 24)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 186, column 2 to column 16)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 188, column 2 to column 21)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 189, column 2 to column 32)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 190, column 2 to column 32)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 192, column 17 to column 36)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 192, column 2 to column 36)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 193, column 17 to column 29)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 193, column 2 to column 29)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 194, column 17 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 194, column 2 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 196, column 2 to column 11)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 198, column 4 to column 16)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 199, column 4 to column 13)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 202, column 4 to column 41)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 203, column 4 to column 30)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 204, column 18 to column 36)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 204, column 4 to column 36)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 205, column 27 to column 39)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 205, column 40 to column 60)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 205, column 25 to column 62)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 205, column 4 to column 62)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 206, column 27 to column 39)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 206, column 40 to column 60)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 206, column 25 to column 62)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 206, column 4 to column 62)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 207, column 4 to column 20)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 197, column 57 to line 208, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 197, column 2 to line 208, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 210, column 4 to column 51)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 209, column 2 to line 210, column 51)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 211, column 2 to column 19)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 171, column 61 to line 212, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 215, column 10 to column 25)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 215, column 2 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 217, column 4 to column 49)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 216, column 30 to line 218, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 216, column 2 to line 218, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 219, column 2 to column 14)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 214, column 45 to line 220, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 225, column 10 to column 25)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 225, column 2 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 226, column 2 to column 11)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 227, column 2 to column 11)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 229, column 4 to column 52)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 230, column 19 to column 33)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 230, column 4 to column 33)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 228, column 30 to line 231, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 228, column 2 to line 231, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 232, column 2 to column 14)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 224, column 49 to line 233, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 236, column 10 to column 28)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 236, column 2 to column 30)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 237, column 2 to column 8)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 238, column 2 to column 8)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 239, column 2 to column 8)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 240, column 2 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 241, column 2 to column 8)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 242, column 2 to column 8)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 244, column 13 to column 22)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 244, column 4 to column 24)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 245, column 4 to column 87)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 247, column 6 to column 31)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 246, column 4 to line 247, column 31)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 248, column 4 to column 22)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 249, column 4 to column 24)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 243, column 16 to line 250, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 243, column 2 to line 250, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 251, column 2 to column 14)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 235, column 86 to line 252, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 256, column 2 to column 12)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 257, column 2 to column 12)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 260, column 6 to column 24)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 259, column 4 to line 260, column 24)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 258, column 2 to line 260, column 24)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 261, column 2 to column 16)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 255, column 37 to line 262, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 266, column 13 to column 32)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 266, column 2 to column 34)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 268, column 4 to column 43)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 267, column 2 to line 268, column 43)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 269, column 2 to column 17)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 265, column 43 to line 270, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 274, column 10 to column 32)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 274, column 2 to column 34)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 275, column 2 to column 9)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 276, column 2 to column 9)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 279, column 6 to column 18)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 280, column 6 to column 18)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 278, column 24 to line 281, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 278, column 4 to line 281, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 277, column 2 to line 281, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 282, column 2 to column 14)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 273, column 39 to line 283, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 287, column 2 to column 12)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 289, column 4 to column 60)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 288, column 2 to line 289, column 60)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 290, column 2 to column 12)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 291, column 30 to column 48)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 291, column 28 to column 50)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 291, column 2 to column 50)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 292, column 2 to column 20)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 293, column 2 to column 15)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 286, column 38 to line 294, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 297, column 20 to column 25)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 297, column 2 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 298, column 2 to column 8)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 299, column 2 to column 8)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 300, column 2 to column 38)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 301, column 2 to column 8)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 302, column 2 to column 25)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 303, column 44 to column 54)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 303, column 42 to column 56)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 303, column 2 to column 56)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 305, column 4 to column 14)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 306, column 4 to column 14)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 308, column 6 to column 16)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 309, column 6 to column 24)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 307, column 43 to line 310, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 307, column 4 to line 310, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 311, column 4 to column 29)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 304, column 21 to line 312, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 304, column 2 to line 312, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 313, column 2 to column 24)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 296, column 58 to line 314, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 317, column 20 to column 30)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 317, column 2 to column 32)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 318, column 2 to column 8)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 319, column 2 to column 9)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 320, column 2 to column 43)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 321, column 2 to column 8)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 322, column 2 to column 9)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 324, column 4 to column 10)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 325, column 4 to column 11)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 326, column 4 to column 21)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 327, column 4 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 328, column 4 to column 77)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 329, column 4 to column 14)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 330, column 4 to column 16)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 323, column 23 to line 331, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 323, column 2 to line 331, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 332, column 2 to column 24)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 316, column 77 to line 333, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 340, column 10 to column 23)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 340, column 2 to column 25)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 342, column 4 to column 30)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 341, column 2 to line 342, column 30)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 343, column 2 to column 13)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 339, column 44 to line 344, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 347, column 9 to column 22)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 347, column 2 to column 28)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 349, column 4 to column 30)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 348, column 2 to line 349, column 30)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 350, column 2 to column 13)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 346, column 46 to line 351, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 354, column 9 to column 22)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 354, column 23 to column 33)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 354, column 2 to column 39)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 356, column 4 to column 30)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 355, column 2 to line 356, column 30)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 357, column 2 to column 13)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 353, column 49 to line 358, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 363, column 2 to column 14)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 364, column 2 to column 17)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 365, column 2 to column 10)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 373, column 8 to column 22)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 372, column 13 to line 374, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 370, column 10 to column 126)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 369, column 8 to line 370, column 126)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 371, column 8 to column 19)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 368, column 27 to line 372, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 368, column 6 to line 374, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 367, column 21 to line 375, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 367, column 4 to line 375, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 366, column 31 to line 376, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 366, column 2 to line 376, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 378, column 4 to column 62)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 377, column 2 to line 378, column 62)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 362, column 25 to line 379, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 385, column 2 to column 34)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 389, column 6 to column 60)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 388, column 4 to line 389, column 60)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 387, column 16 to line 390, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 387, column 2 to line 390, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 384, column 75 to line 391, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 394, column 2 to column 31)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 395, column 2 to column 12)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 397, column 4 to line 399, column 56)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 400, column 4 to column 22)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 396, column 16 to line 401, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 396, column 2 to line 401, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 393, column 97 to line 402, column 1)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 413, column 6 to column 36)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 412, column 26 to line 414, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 412, column 11 to line 414, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 411, column 6 to column 39)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 410, column 26 to line 412, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 410, column 11 to line 414, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 409, column 6 to column 36)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 406, column 19 to line 410, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 406, column 4 to line 414, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 415, column 4 to column 44)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 416, column 4 to column 15)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 405, column 58 to line 417, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 421, column 4 to column 70)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 420, column 50 to line 422, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 432, column 4 to column 33)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 433, column 4 to column 32)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 434, column 4 to column 34)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 435, column 11 to column 18)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 435, column 4 to column 23)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 438, column 6 to column 28)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 439, column 6 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 447, column 12 to column 73)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 446, column 32 to line 448, column 11)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 446, column 10 to line 448, column 11)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 444, column 29 to line 449, column 9)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 444, column 8 to line 449, column 9)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 451, column 8 to column 49)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 443, column 13 to line 452, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 442, column 8 to column 20)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 440, column 22 to line 443, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 440, column 6 to line 452, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 456, column 8 to column 36)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 455, column 24 to line 457, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 455, column 6 to line 457, column 7)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 437, column 24 to line 458, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 437, column 4 to line 458, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 460, column 4 to column 14)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 431, column 52 to line 461, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 488, column 4 to column 33)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 489, column 14 to column 21)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 489, column 4 to column 23)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 490, column 14 to column 21)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 490, column 4 to column 23)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 492, column 6 to column 32)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 493, column 6 to column 32)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 491, column 24 to line 494, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 491, column 4 to line 494, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 495, column 4 to column 117)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 487, column 44 to line 496, column 3)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 506, column 4 to column 42)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 507, column 4 to column 41)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 508, column 4 to column 41)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 509, column 11 to column 23)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 509, column 4 to column 34)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 512, column 6 to column 43)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 511, column 4 to line 512, column 43)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 515, column 19 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 515, column 6 to column 47)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 516, column 18 to column 27)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 516, column 6 to column 46)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 517, column 32 to column 40)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 517, column 6 to column 42)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 518, column 13 to column 22)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 518, column 6 to column 39)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 520, column 8 to column 75)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 519, column 6 to line 520, column 75)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 522, column 8 to column 72)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 521, column 6 to line 522, column 72)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 524, column 6 to line 530, column 46)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 514, column 29 to line 531, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 514, column 4 to line 531, column 5)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 533, column 4 to column 20)",
                                                      " (in 'examples/blrm_exnex/blrm_exnex.stan', line 505, column 62 to line 534, column 3)"};


std::vector<int>
make_slice_index(const std::vector<int>& S, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 376;
    validate_non_negative_index("Si", "size(S) + 1", (size(S) + 1));
    std::vector<int> Si;
    Si = std::vector<int>((size(S) + 1), std::numeric_limits<int>::min());
    
    int cv;
    cv = std::numeric_limits<int>::min();
    
    current_statement__ = 378;
    cv = 1;
    current_statement__ = 379;
    assign(Si, cons_list(index_uni(1), nil_index_list()), cv,
      "assigning variable Si");
    current_statement__ = 383;
    for (int i = 1; i <= size(S); ++i) {
      current_statement__ = 380;
      cv = (cv + S[(i - 1)]);
      current_statement__ = 381;
      assign(Si, cons_list(index_uni((i + 1)), nil_index_list()), cv,
        "assigning variable Si");}
    current_statement__ = 384;
    return Si;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct make_slice_index_functor__ {
std::vector<int>
operator()(const std::vector<int>& S, std::ostream* pstream__)  const 
{
return make_slice_index(S, pstream__);
}
};

int
rle_elem_count(const std::vector<int>& set, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int U;
    U = std::numeric_limits<int>::min();
    
    current_statement__ = 386;
    U = 1;
    current_statement__ = 390;
    for (int i = 2; i <= num_elements(set); ++i) {
      current_statement__ = 388;
      if (logical_neq(set[((i - 1) - 1)], set[(i - 1)])) {
        current_statement__ = 387;
        U = (U + 1);
      } }
    current_statement__ = 391;
    return U;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct rle_elem_count_functor__ {
int
operator()(const std::vector<int>& set, std::ostream* pstream__)  const 
{
return rle_elem_count(set, pstream__);
}
};

template <typename T0__>
int
rle_elem_count_vector(const Eigen::Matrix<T0__, -1, 1>& set,
                      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int U;
    U = std::numeric_limits<int>::min();
    
    current_statement__ = 393;
    U = 1;
    current_statement__ = 397;
    for (int i = 2; i <= num_elements(set); ++i) {
      current_statement__ = 395;
      if (logical_neq(set[((i - 1) - 1)], set[(i - 1)])) {
        current_statement__ = 394;
        U = (U + 1);
      } }
    current_statement__ = 398;
    return U;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct rle_elem_count_vector_functor__ {
template <typename T0__>
int
operator()(const Eigen::Matrix<T0__, -1, 1>& set, std::ostream* pstream__)  const 
{
return rle_elem_count_vector(set, pstream__);
}
};

std::vector<int>
rle_int(const std::vector<int>& set, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 400;
    validate_non_negative_index("res", "rle_elem_count(set)",
                                rle_elem_count(set, pstream__));
    std::vector<int> res;
    res = std::vector<int>(rle_elem_count(set, pstream__), std::numeric_limits<int>::min());
    
    int c;
    c = std::numeric_limits<int>::min();
    
    current_statement__ = 402;
    c = 1;
    current_statement__ = 403;
    assign(res, cons_list(index_uni(1), nil_index_list()), 1,
      "assigning variable res");
    current_statement__ = 411;
    for (int i = 2; i <= num_elements(set); ++i) {
      current_statement__ = 409;
      if (logical_eq(set[((i - 1) - 1)], set[(i - 1)])) {
        current_statement__ = 407;
        assign(res, cons_list(index_uni(c), nil_index_list()),
          (res[(c - 1)] + 1), "assigning variable res");
      } else {
        current_statement__ = 404;
        c = (c + 1);
        current_statement__ = 405;
        assign(res, cons_list(index_uni(c), nil_index_list()), 1,
          "assigning variable res");
      }}
    current_statement__ = 412;
    return res;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct rle_int_functor__ {
std::vector<int>
operator()(const std::vector<int>& set, std::ostream* pstream__)  const 
{
return rle_int(set, pstream__);
}
};

std::vector<int>
rle_elem_int(const std::vector<int>& set, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 414;
    N = rle_elem_count(set, pstream__);
    current_statement__ = 415;
    validate_non_negative_index("first_ind", "N", N);
    std::vector<int> first_ind;
    first_ind = std::vector<int>(N, std::numeric_limits<int>::min());
    
    current_statement__ = 416;
    assign(first_ind, nil_index_list(),
      rvalue(make_slice_index(rle_int(set, pstream__), pstream__),
        cons_list(index_min_max(1, N), nil_index_list()),
        "make_slice_index(rle_int(set))"), "assigning variable first_ind");
    current_statement__ = 417;
    return rvalue(set, cons_list(index_multi(first_ind), nil_index_list()),
             "set");
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct rle_elem_int_functor__ {
std::vector<int>
operator()(const std::vector<int>& set, std::ostream* pstream__)  const 
{
return rle_elem_int(set, pstream__);
}
};

void
check_duplicate_ids(const std::vector<int>& id, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 419;
    N = rle_elem_count(id, pstream__);
    current_statement__ = 420;
    validate_non_negative_index("sorted_ids", "N", N);
    std::vector<int> sorted_ids;
    sorted_ids = std::vector<int>(N, std::numeric_limits<int>::min());
    
    current_statement__ = 421;
    assign(sorted_ids, nil_index_list(),
      sort_asc(rle_elem_int(id, pstream__)), "assigning variable sorted_ids");
    int cid;
    cid = std::numeric_limits<int>::min();
    
    current_statement__ = 422;
    cid = sorted_ids[(1 - 1)];
    current_statement__ = 426;
    for (int i = 1; i <= (N - 1); ++i) {
      current_statement__ = 424;
      if (logical_eq(sorted_ids[(i - 1)], sorted_ids[((i + 1) - 1)])) {
        current_statement__ = 423;
        std::stringstream errmsg_stream__;
        errmsg_stream__ << "ID ";
        errmsg_stream__ << sorted_ids[(i - 1)];
        errmsg_stream__ << " occurs multiple times within id vector.";
        throw std::domain_error(errmsg_stream__.str());
      } }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct check_duplicate_ids_functor__ {
void
operator()(const std::vector<int>& id, std::ostream* pstream__)  const 
{
return check_duplicate_ids(id, pstream__);
}
};

std::vector<int>
decimal2base(const int& decimal, const int& digits, const int& base,
             std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 428;
    validate_non_negative_index("base_rep", "digits", digits);
    std::vector<int> base_rep;
    base_rep = std::vector<int>(digits, std::numeric_limits<int>::min());
    
    int current;
    current = std::numeric_limits<int>::min();
    
    current_statement__ = 430;
    current = decimal;
    current_statement__ = 434;
    for (int i = 1; i <= digits; ++i) {
      current_statement__ = 431;
      assign(base_rep, cons_list(index_uni(i), nil_index_list()),
        modulus(current, base), "assigning variable base_rep");
      current_statement__ = 432;
      current = (current / base);}
    current_statement__ = 435;
    return base_rep;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct decimal2base_functor__ {
std::vector<int>
operator()(const int& decimal, const int& digits, const int& base,
           std::ostream* pstream__)  const 
{
return decimal2base(decimal, digits, base, pstream__);
}
};

int
power_int(const int& number, const int& power, std::ostream* pstream__) ;

int
power_int(const int& number, const int& power, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 439;
    if (logical_lt(power, 0)) {
      current_statement__ = 438;
      std::stringstream errmsg_stream__;
      errmsg_stream__ << "Cannot raise an integer to a negative power and expect an integer result.";
      throw std::domain_error(errmsg_stream__.str());
    } 
    current_statement__ = 442;
    if (logical_eq(power, 0)) {
      current_statement__ = 441;
      return 1;
    } else {
      current_statement__ = 440;
      return (number * power_int(number, (power - 1), pstream__));
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct power_int_functor__ {
int
operator()(const int& number, const int& power, std::ostream* pstream__)  const 
{
return power_int(number, power, pstream__);
}
};

int
cardinality_int(const std::vector<int>& elems, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 444;
    return rle_elem_count(sort_asc(elems), pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct cardinality_int_functor__ {
int
operator()(const std::vector<int>& elems, std::ostream* pstream__)  const 
{
return cardinality_int(elems, pstream__);
}
};

template <typename T0__>
int
cardinality_vector(const Eigen::Matrix<T0__, -1, 1>& elems,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 446;
    return rle_elem_count_vector(sort_asc(elems), pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct cardinality_vector_functor__ {
template <typename T0__>
int
operator()(const Eigen::Matrix<T0__, -1, 1>& elems, std::ostream* pstream__)  const 
{
return cardinality_vector(elems, pstream__);
}
};

std::vector<int>
seq_int(const int& start, const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 448;
    N = ((end - start) + 1);
    current_statement__ = 449;
    validate_non_negative_index("seq", "N", N);
    std::vector<int> seq;
    seq = std::vector<int>(N, std::numeric_limits<int>::min());
    
    current_statement__ = 452;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 451;
      assign(seq, cons_list(index_uni(i), nil_index_list()),
        ((i + start) - 1), "assigning variable seq");}
    current_statement__ = 453;
    return seq;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct seq_int_functor__ {
std::vector<int>
operator()(const int& start, const int& end, std::ostream* pstream__)  const 
{
return seq_int(start, end, pstream__);
}
};

std::vector<int>
rep_each(const std::vector<int>& set, const std::vector<int>& each,
         std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 455;
    N = sum(each);
    current_statement__ = 456;
    validate_non_negative_index("replicated", "N", N);
    std::vector<int> replicated;
    replicated = std::vector<int>(N, std::numeric_limits<int>::min());
    
    int p;
    p = std::numeric_limits<int>::min();
    
    current_statement__ = 458;
    p = 1;
    current_statement__ = 462;
    for (int i = 1; i <= size(set); ++i) {
      current_statement__ = 459;
      assign(replicated,
        cons_list(index_min_max(p, ((p + each[(i - 1)]) - 1)),
          nil_index_list()), rep_array(set[(i - 1)], each[(i - 1)]),
        "assigning variable replicated");
      current_statement__ = 460;
      p = (p + each[(i - 1)]);}
    current_statement__ = 463;
    return replicated;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct rep_each_functor__ {
std::vector<int>
operator()(const std::vector<int>& set, const std::vector<int>& each,
           std::ostream* pstream__)  const 
{
return rep_each(set, each, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
log_diff_exp_abs(const T0__& la, const T1__& lb, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 465;
    return (0.5 *
             log_diff_exp(log_sum_exp((2 * la), (2 * lb)),
               ((stan::math::log(2) + la) + lb)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct log_diff_exp_abs_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& la, const T1__& lb, std::ostream* pstream__)  const 
{
return log_diff_exp_abs(la, lb, pstream__);
}
};

template <typename T0__, typename T1__>
std::vector<int>
find_interval_slow(const Eigen::Matrix<T0__, -1, 1>& x,
                   const Eigen::Matrix<T1__, -1, 1>& sorted,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 467;
    validate_non_negative_index("res", "num_elements(x)", num_elements(x));
    std::vector<int> res;
    res = std::vector<int>(num_elements(x), std::numeric_limits<int>::min());
    
    current_statement__ = 471;
    for (int i = 1; i <= num_elements(x); ++i) {
      current_statement__ = 469;
      assign(res, cons_list(index_uni(i), nil_index_list()),
        rank(append_row(rep_vector(x[(i - 1)], 1), sorted), 1),
        "assigning variable res");}
    current_statement__ = 472;
    return res;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct find_interval_slow_functor__ {
template <typename T0__, typename T1__>
std::vector<int>
operator()(const Eigen::Matrix<T0__, -1, 1>& x,
           const Eigen::Matrix<T1__, -1, 1>& sorted, std::ostream* pstream__)  const 
{
return find_interval_slow(x, sorted, pstream__);
}
};

template <typename T0__, typename T1__>
int
find_interval_elem(const T0__& x, const Eigen::Matrix<T1__, -1, 1>& sorted,
                   const int& start_ind, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int res;
    res = std::numeric_limits<int>::min();
    
    int N;
    N = std::numeric_limits<int>::min();
    
    int max_iter;
    max_iter = std::numeric_limits<int>::min();
    
    local_scalar_t__ left;
    left = DUMMY_VAR__;
    
    local_scalar_t__ right;
    right = DUMMY_VAR__;
    
    int left_ind;
    left_ind = std::numeric_limits<int>::min();
    
    int right_ind;
    right_ind = std::numeric_limits<int>::min();
    
    int iter;
    iter = std::numeric_limits<int>::min();
    
    current_statement__ = 482;
    N = num_elements(sorted);
    current_statement__ = 484;
    if (logical_eq(N, 0)) {
      current_statement__ = 483;
      return 0;
    } 
    current_statement__ = 485;
    left_ind = start_ind;
    current_statement__ = 486;
    right_ind = N;
    current_statement__ = 487;
    max_iter = (100 * N);
    current_statement__ = 488;
    left = (sorted[(left_ind - 1)] - x);
    current_statement__ = 489;
    right = (sorted[(right_ind - 1)] - x);
    current_statement__ = 491;
    if (logical_lte(0, left)) {
      current_statement__ = 490;
      return (left_ind - 1);
    } 
    current_statement__ = 493;
    if (logical_eq(0, right)) {
      current_statement__ = 492;
      return (N - 1);
    } 
    current_statement__ = 495;
    if (logical_gt(0, right)) {
      current_statement__ = 494;
      return N;
    } 
    current_statement__ = 496;
    iter = 1;
    current_statement__ = 513;
    while ((primitive_value(logical_gt((right_ind - left_ind), 1)) &&
           primitive_value(logical_neq(iter, max_iter)))) {
      int mid_ind;
      mid_ind = std::numeric_limits<int>::min();
      
      local_scalar_t__ mid;
      mid = DUMMY_VAR__;
      
      current_statement__ = 499;
      mid_ind = ((left_ind + right_ind) / 2);
      current_statement__ = 500;
      mid = (sorted[(mid_ind - 1)] - x);
      current_statement__ = 502;
      if (logical_eq(mid, 0)) {
        current_statement__ = 501;
        return (mid_ind - 1);
      } 
      current_statement__ = 506;
      if (logical_lt((left * mid), 0)) {
        current_statement__ = 503;
        right = mid;
        current_statement__ = 504;
        right_ind = mid_ind;
      } 
      current_statement__ = 510;
      if (logical_lt((right * mid), 0)) {
        current_statement__ = 507;
        left = mid;
        current_statement__ = 508;
        left_ind = mid_ind;
      } 
      current_statement__ = 511;
      iter = (iter + 1);
    }
    current_statement__ = 515;
    if (logical_eq(iter, max_iter)) {
      current_statement__ = 514;
      if (pstream__) {
        stan_print(pstream__, "Maximum number of iterations reached.");
        stan_print(pstream__, "\n");
      }
    } 
    current_statement__ = 516;
    return left_ind;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct find_interval_elem_functor__ {
template <typename T0__, typename T1__>
int
operator()(const T0__& x, const Eigen::Matrix<T1__, -1, 1>& sorted,
           const int& start_ind, std::ostream* pstream__)  const 
{
return find_interval_elem(x, sorted, start_ind, pstream__);
}
};

template <typename T0__, typename T1__>
std::vector<int>
find_interval(const Eigen::Matrix<T0__, -1, 1>& x,
              const Eigen::Matrix<T1__, -1, 1>& sorted,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 518;
    validate_non_negative_index("res", "num_elements(x)", num_elements(x));
    std::vector<int> res;
    res = std::vector<int>(num_elements(x), std::numeric_limits<int>::min());
    
    current_statement__ = 522;
    for (int i = 1; i <= num_elements(x); ++i) {
      current_statement__ = 520;
      assign(res, cons_list(index_uni(i), nil_index_list()),
        find_interval_elem(x[(i - 1)], sorted, 1, pstream__),
        "assigning variable res");}
    current_statement__ = 523;
    return res;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct find_interval_functor__ {
template <typename T0__, typename T1__>
std::vector<int>
operator()(const Eigen::Matrix<T0__, -1, 1>& x,
           const Eigen::Matrix<T1__, -1, 1>& sorted, std::ostream* pstream__)  const 
{
return find_interval(x, sorted, pstream__);
}
};

template <typename T0__, typename T1__>
std::vector<int>
find_interval_asc(const Eigen::Matrix<T0__, -1, 1>& x,
                  const Eigen::Matrix<T1__, -1, 1>& sorted,
                  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 525;
    validate_non_negative_index("res", "num_elements(x)", num_elements(x));
    std::vector<int> res;
    res = std::vector<int>(num_elements(x), std::numeric_limits<int>::min());
    
    int last;
    last = std::numeric_limits<int>::min();
    
    current_statement__ = 528;
    last = 1;
    current_statement__ = 533;
    for (int i = 1; i <= num_elements(x); ++i) {
      current_statement__ = 529;
      assign(res, cons_list(index_uni(i), nil_index_list()),
        find_interval_elem(x[(i - 1)], sorted, last, pstream__),
        "assigning variable res");
      current_statement__ = 531;
      if (logical_gt(res[(i - 1)], 0)) {
        current_statement__ = 530;
        last = res[(i - 1)];
      } }
    current_statement__ = 534;
    return res;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct find_interval_asc_functor__ {
template <typename T0__, typename T1__>
std::vector<int>
operator()(const Eigen::Matrix<T0__, -1, 1>& x,
           const Eigen::Matrix<T1__, -1, 1>& sorted, std::ostream* pstream__)  const 
{
return find_interval_asc(x, sorted, pstream__);
}
};

template <typename T1__, typename T3__>
std::vector<int>
find_interval_blocked(const std::vector<int>& vals_M,
                      const Eigen::Matrix<T1__, -1, 1>& vals,
                      const std::vector<int>& sorted_M,
                      const Eigen::Matrix<T3__, -1, 1>& sorted,
                      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 536;
    validate_non_negative_index("res", "num_elements(vals)",
                                num_elements(vals));
    std::vector<int> res;
    res = std::vector<int>(num_elements(vals), std::numeric_limits<int>::min());
    
    int M;
    M = std::numeric_limits<int>::min();
    
    int v;
    v = std::numeric_limits<int>::min();
    
    int s;
    s = std::numeric_limits<int>::min();
    
    current_statement__ = 541;
    M = num_elements(vals_M);
    current_statement__ = 542;
    v = 1;
    current_statement__ = 543;
    s = 1;
    current_statement__ = 552;
    for (int m = 1; m <= M; ++m) {
      current_statement__ = 544;
      validate_non_negative_index("temp", "vals_M[m]", vals_M[(m - 1)]);
      std::vector<int> temp;
      temp = std::vector<int>(vals_M[(m - 1)], std::numeric_limits<int>::min());
      
      current_statement__ = 546;
      assign(temp, nil_index_list(),
        find_interval(segment(vals, v, vals_M[(m - 1)]),
          segment(sorted, s, sorted_M[(m - 1)]), pstream__),
        "assigning variable temp");
      current_statement__ = 548;
      for (int n = 1; n <= vals_M[(m - 1)]; ++n) {
        current_statement__ = 547;
        assign(res, cons_list(index_uni(((v + n) - 1)), nil_index_list()),
          temp[(n - 1)], "assigning variable res");}
      current_statement__ = 549;
      v = (v + vals_M[(m - 1)]);
      current_statement__ = 550;
      s = (s + sorted_M[(m - 1)]);}
    current_statement__ = 553;
    return res;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct find_interval_blocked_functor__ {
template <typename T1__, typename T3__>
std::vector<int>
operator()(const std::vector<int>& vals_M,
           const Eigen::Matrix<T1__, -1, 1>& vals,
           const std::vector<int>& sorted_M,
           const Eigen::Matrix<T3__, -1, 1>& sorted, std::ostream* pstream__)  const 
{
return find_interval_blocked(vals_M, vals, sorted_M, sorted, pstream__);
}
};

int
count_elem(const std::vector<int>& test, const int& elem,
           std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int count;
    count = std::numeric_limits<int>::min();
    
    current_statement__ = 556;
    count = 0;
    current_statement__ = 559;
    for (int i = 1; i <= num_elements(test); ++i) {
      current_statement__ = 558;
      if (logical_eq(test[(i - 1)], elem)) {
        current_statement__ = 557;
        count = (count + 1);
      } }
    current_statement__ = 560;
    return count;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct count_elem_functor__ {
int
operator()(const std::vector<int>& test, const int& elem,
           std::ostream* pstream__)  const 
{
return count_elem(test, elem, pstream__);
}
};

std::vector<int>
count_elems(const std::vector<int>& test, const std::vector<int>& elems,
            std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 562;
    validate_non_negative_index("counts", "num_elements(elems)",
                                num_elements(elems));
    std::vector<int> counts;
    counts = std::vector<int>(num_elements(elems), std::numeric_limits<int>::min());
    
    current_statement__ = 565;
    for (int i = 1; i <= num_elements(elems); ++i) {
      current_statement__ = 564;
      assign(counts, cons_list(index_uni(i), nil_index_list()),
        count_elem(test, elems[(i - 1)], pstream__),
        "assigning variable counts");}
    current_statement__ = 566;
    return counts;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct count_elems_functor__ {
std::vector<int>
operator()(const std::vector<int>& test, const std::vector<int>& elems,
           std::ostream* pstream__)  const 
{
return count_elems(test, elems, pstream__);
}
};

std::vector<int>
which_elem(const std::vector<int>& test, const int& elem,
           std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 568;
    validate_non_negative_index("res", "count_elem(test, elem)",
                                count_elem(test, elem, pstream__));
    std::vector<int> res;
    res = std::vector<int>(count_elem(test, elem, pstream__), std::numeric_limits<int>::min());
    
    int ci;
    ci = std::numeric_limits<int>::min();
    
    current_statement__ = 571;
    ci = 1;
    current_statement__ = 576;
    for (int i = 1; i <= num_elements(test); ++i) {
      current_statement__ = 575;
      if (logical_eq(test[(i - 1)], elem)) {
        current_statement__ = 572;
        assign(res, cons_list(index_uni(ci), nil_index_list()), i,
          "assigning variable res");
        current_statement__ = 573;
        ci = (ci + 1);
      } }
    current_statement__ = 577;
    return res;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct which_elem_functor__ {
std::vector<int>
operator()(const std::vector<int>& test, const int& elem,
           std::ostream* pstream__)  const 
{
return which_elem(test, elem, pstream__);
}
};

template <typename T0__, typename T1__>
int
floor_div_int(const T0__& fac, const T1__& div, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int count;
    count = std::numeric_limits<int>::min();
    
    current_statement__ = 581;
    if (logical_lt(fac, 0)) {
      current_statement__ = 580;
      std::stringstream errmsg_stream__;
      errmsg_stream__ << "floor_div_int only works for positive values.";
      throw std::domain_error(errmsg_stream__.str());
    } 
    current_statement__ = 582;
    count = 1;
    current_statement__ = 585;
    while (logical_lte((count * div), fac)) {
      current_statement__ = 583;
      count = (count + 1);
    }
    current_statement__ = 586;
    count = (count - 1);
    current_statement__ = 587;
    return count;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct floor_div_int_functor__ {
template <typename T0__, typename T1__>
int
operator()(const T0__& fac, const T1__& div, std::ostream* pstream__)  const 
{
return floor_div_int(fac, div, pstream__);
}
};

std::vector<int>
count_obs_event_free(const std::vector<int>& obs_timeRank, const int& ndose,
                     std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 589;
    validate_non_negative_index("dose_next_obs", "ndose", ndose);
    std::vector<int> dose_next_obs;
    dose_next_obs = std::vector<int>(ndose, std::numeric_limits<int>::min());
    
    int o;
    o = std::numeric_limits<int>::min();
    
    int O;
    O = std::numeric_limits<int>::min();
    
    current_statement__ = 593;
    assign(dose_next_obs, nil_index_list(), rep_array(0, ndose),
      "assigning variable dose_next_obs");
    current_statement__ = 594;
    o = 0;
    current_statement__ = 595;
    O = size(obs_timeRank);
    current_statement__ = 598;
    while ((primitive_value(logical_lt(o, O)) && primitive_value(
           logical_eq(obs_timeRank[((o + 1) - 1)], 0)))) {
      current_statement__ = 596;
      o = (o + 1);
    }
    current_statement__ = 607;
    for (int i = 1; i <= ndose; ++i) {
      int count;
      count = std::numeric_limits<int>::min();
      
      current_statement__ = 600;
      count = 0;
      current_statement__ = 604;
      while ((primitive_value(logical_lt(o, O)) && primitive_value(
             logical_eq(obs_timeRank[((o + 1) - 1)], i)))) {
        current_statement__ = 601;
        o = (o + 1);
        current_statement__ = 602;
        count = (count + 1);
      }
      current_statement__ = 605;
      assign(dose_next_obs, cons_list(index_uni(i), nil_index_list()), count,
        "assigning variable dose_next_obs");}
    current_statement__ = 608;
    return dose_next_obs;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct count_obs_event_free_functor__ {
std::vector<int>
operator()(const std::vector<int>& obs_timeRank, const int& ndose,
           std::ostream* pstream__)  const 
{
return count_obs_event_free(obs_timeRank, ndose, pstream__);
}
};

std::vector<int>
count_obs_event_free_blocked(const std::vector<int>& M,
                             const std::vector<int>& obs_timeRank,
                             const std::vector<int>& ndose,
                             std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 610;
    validate_non_negative_index("dose_next_obs", "sum(ndose)", sum(ndose));
    std::vector<int> dose_next_obs;
    dose_next_obs = std::vector<int>(sum(ndose), std::numeric_limits<int>::min());
    
    int l;
    l = std::numeric_limits<int>::min();
    
    int ld;
    ld = std::numeric_limits<int>::min();
    
    current_statement__ = 614;
    assign(dose_next_obs, nil_index_list(), rep_array(0, sum(ndose)),
      "assigning variable dose_next_obs");
    current_statement__ = 615;
    l = 1;
    current_statement__ = 616;
    ld = 1;
    current_statement__ = 625;
    for (int i = 1; i <= size(M); ++i) {
      int u;
      u = std::numeric_limits<int>::min();
      
      int ud;
      ud = std::numeric_limits<int>::min();
      
      current_statement__ = 619;
      u = ((l + M[(i - 1)]) - 1);
      current_statement__ = 620;
      ud = ((ld + ndose[(i - 1)]) - 1);
      current_statement__ = 621;
      assign(dose_next_obs,
        cons_list(index_min_max(ld, ud), nil_index_list()),
        count_obs_event_free(
          rvalue(obs_timeRank,
            cons_list(index_min_max(l, u), nil_index_list()), "obs_timeRank"),
          ndose[(i - 1)], pstream__), "assigning variable dose_next_obs");
      current_statement__ = 622;
      l = (u + 1);
      current_statement__ = 623;
      ld = (ud + 1);}
    current_statement__ = 626;
    return dose_next_obs;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct count_obs_event_free_blocked_functor__ {
std::vector<int>
operator()(const std::vector<int>& M, const std::vector<int>& obs_timeRank,
           const std::vector<int>& ndose, std::ostream* pstream__)  const 
{
return count_obs_event_free_blocked(M, obs_timeRank, ndose, pstream__);
}
};

std::vector<int>
subset_int(const std::vector<int>& cand, const std::vector<int>& ind_set,
           std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 628;
    validate_non_negative_index("out", "size(ind_set)", size(ind_set));
    std::vector<int> out;
    out = std::vector<int>(size(ind_set), std::numeric_limits<int>::min());
    
    current_statement__ = 631;
    for (int i = 1; i <= size(ind_set); ++i) {
      current_statement__ = 630;
      assign(out, cons_list(index_uni(i), nil_index_list()),
        cand[(ind_set[(i - 1)] - 1)], "assigning variable out");}
    current_statement__ = 632;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct subset_int_functor__ {
std::vector<int>
operator()(const std::vector<int>& cand, const std::vector<int>& ind_set,
           std::ostream* pstream__)  const 
{
return subset_int(cand, ind_set, pstream__);
}
};

template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
subset_vec(const Eigen::Matrix<T0__, -1, 1>& cand,
           const std::vector<int>& ind_set, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 634;
    validate_non_negative_index("out", "size(ind_set)", size(ind_set));
    Eigen::Matrix<local_scalar_t__, -1, 1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, 1>(size(ind_set));
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 637;
    for (int i = 1; i <= size(ind_set); ++i) {
      current_statement__ = 636;
      assign(out, cons_list(index_uni(i), nil_index_list()),
        cand[(ind_set[(i - 1)] - 1)], "assigning variable out");}
    current_statement__ = 638;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct subset_vec_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
operator()(const Eigen::Matrix<T0__, -1, 1>& cand,
           const std::vector<int>& ind_set, std::ostream* pstream__)  const 
{
return subset_vec(cand, ind_set, pstream__);
}
};

template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, -1>
subset_matrix(const Eigen::Matrix<T0__, -1, -1>& cand,
              const std::vector<int>& ind_set, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 640;
    validate_non_negative_index("out", "size(ind_set)", size(ind_set));
    current_statement__ = 641;
    validate_non_negative_index("out", "cols(cand)", cols(cand));
    Eigen::Matrix<local_scalar_t__, -1, -1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, -1>(size(ind_set), cols(cand));
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 644;
    for (int i = 1; i <= size(ind_set); ++i) {
      current_statement__ = 643;
      assign(out, cons_list(index_uni(i), nil_index_list()),
        rvalue(cand,
          cons_list(index_uni(ind_set[(i - 1)]), nil_index_list()), "cand"),
        "assigning variable out");}
    current_statement__ = 645;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct subset_matrix_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, -1>
operator()(const Eigen::Matrix<T0__, -1, -1>& cand,
           const std::vector<int>& ind_set, std::ostream* pstream__)  const 
{
return subset_matrix(cand, ind_set, pstream__);
}
};

void
check_ids(const std::vector<int>& id, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int cid;
    cid = std::numeric_limits<int>::min();
    
    current_statement__ = 647;
    cid = 0;
    int warned;
    warned = std::numeric_limits<int>::min();
    
    current_statement__ = 648;
    warned = 0;
    current_statement__ = 649;
    cid = 0;
    current_statement__ = 660;
    for (int n = 1; n <= num_elements(id); ++n) {
      current_statement__ = 658;
      if (logical_neq(id[(n - 1)], cid)) {
        current_statement__ = 656;
        if (logical_neq(id[(n - 1)], (cid + 1))) {
          current_statement__ = 653;
          if (logical_negation(warned)) {
            current_statement__ = 652;
            if (pstream__) {
              stan_print(pstream__, "WARNING: id vector not correctly sorted, i.e. not in range 1..J. Consider using the cid vector internally.");
              stan_print(pstream__, "\n");
            }
          } 
          current_statement__ = 654;
          warned = 1;
        } else {
          current_statement__ = 650;
          cid = (cid + 1);
        }
      } }
    current_statement__ = 662;
    if (logical_neq(max(id), cid)) {
      current_statement__ = 661;
      if (pstream__) {
        stan_print(pstream__, "WARNING: Last patient's id not equal to max(id).");
        stan_print(pstream__, "\n");
      }
    } 
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct check_ids_functor__ {
void
operator()(const std::vector<int>& id, std::ostream* pstream__)  const 
{
return check_ids(id, pstream__);
}
};

template <typename T0__, typename T1__>
void
check_addl_dosing(const Eigen::Matrix<T0__, -1, 1>& dose_time,
                  const Eigen::Matrix<T1__, -1, 1>& dose_tau,
                  const std::vector<int>& dose_addl, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int D;
    D = std::numeric_limits<int>::min();
    
    current_statement__ = 664;
    D = num_elements(dose_time);
    current_statement__ = 668;
    for (int d = 2; d <= D; ++d) {
      current_statement__ = 666;
      if (logical_lt(dose_time[(d - 1)],
            (dose_time[((d - 1) - 1)] +
              (dose_tau[((d - 1) - 1)] * dose_addl[((d - 1) - 1)])))) {
        current_statement__ = 665;
        std::stringstream errmsg_stream__;
        errmsg_stream__ << "Forbidden overlapping dosing records found.";
        throw std::domain_error(errmsg_stream__.str());
      } }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct check_addl_dosing_functor__ {
template <typename T0__, typename T1__>
void
operator()(const Eigen::Matrix<T0__, -1, 1>& dose_time,
           const Eigen::Matrix<T1__, -1, 1>& dose_tau,
           const std::vector<int>& dose_addl, std::ostream* pstream__)  const 
{
return check_addl_dosing(dose_time, dose_tau, dose_addl, pstream__);
}
};

template <typename T1__, typename T2__>
void
check_addl_dosing_blocked(const std::vector<int>& dose_M,
                          const Eigen::Matrix<T1__, -1, 1>& dose_time,
                          const Eigen::Matrix<T2__, -1, 1>& dose_tau,
                          const std::vector<int>& dose_addl,
                          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int M;
    M = std::numeric_limits<int>::min();
    
    current_statement__ = 670;
    M = num_elements(dose_M);
    int b;
    b = std::numeric_limits<int>::min();
    
    current_statement__ = 671;
    b = 1;
    current_statement__ = 675;
    for (int m = 1; m <= M; ++m) {
      current_statement__ = 672;
      check_addl_dosing(segment(dose_time, b, dose_M[(m - 1)]),
        segment(dose_tau, b, dose_M[(m - 1)]),
        segment(dose_addl, b, dose_M[(m - 1)]), pstream__);
      current_statement__ = 673;
      b = (b + dose_M[(m - 1)]);}
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct check_addl_dosing_blocked_functor__ {
template <typename T1__, typename T2__>
void
operator()(const std::vector<int>& dose_M,
           const Eigen::Matrix<T1__, -1, 1>& dose_time,
           const Eigen::Matrix<T2__, -1, 1>& dose_tau,
           const std::vector<int>& dose_addl, std::ostream* pstream__)  const 
{
return check_addl_dosing_blocked(dose_M, dose_time, dose_tau, dose_addl,
         pstream__);
}
};

template <bool propto__, typename T0__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T2__,
T3__>
tau_prior_lpdf(const T0__& tau, const int& dist, const T2__& a,
               const T3__& b, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T2__, T3__>;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 685;
    if (logical_eq(dist, 0)) {
      current_statement__ = 683;
      return normal_lpdf<false>(tau, 0, 1);
    } else {
      current_statement__ = 682;
      if (logical_eq(dist, 1)) {
        current_statement__ = 680;
        return lognormal_lpdf<false>(tau, a, b);
      } else {
        current_statement__ = 679;
        if (logical_eq(dist, 2)) {
          current_statement__ = 677;
          return normal_lpdf<false>(tau, a, b);
        } 
      }
    }
    current_statement__ = 686;
    std::stringstream errmsg_stream__;
    errmsg_stream__ << "Invalid distribution for tau.";
    throw std::domain_error(errmsg_stream__.str());
    current_statement__ = 687;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct tau_prior_lpdf_functor__ {
template <bool propto__, typename T0__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T2__,
T3__>
operator()(const T0__& tau, const int& dist, const T2__& a, const T3__& b,
           std::ostream* pstream__)  const 
{
return tau_prior_lpdf<propto__>(tau, dist, a, b, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, -1>
bvn_cholesky_lower(const Eigen::Matrix<T0__, -1, 1>& tau, const T1__& rho,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 689;
    return stan::math::to_matrix(
        stan::math::array_builder<Eigen::Matrix<local_scalar_t__, 1, -1>>()
        .add(stan::math::to_row_vector(
        stan::math::array_builder<local_scalar_t__>().add(tau[(1 - 1)])
        .add(0.0).array())).add(stan::math::to_row_vector(
        stan::math::array_builder<local_scalar_t__>()
        .add((tau[(2 - 1)] * rho))
        .add((tau[(2 - 1)] * stan::math::sqrt((1.0 - pow(rho, 2)))))
        .array())).array());
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct bvn_cholesky_lower_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, -1>
operator()(const Eigen::Matrix<T0__, -1, 1>& tau, const T1__& rho,
           std::ostream* pstream__)  const 
{
return bvn_cholesky_lower(tau, rho, pstream__);
}
};

template <typename T2__, typename T4__, typename T5__, typename T6__>
Eigen::Matrix<stan::promote_args_t<T2__, T4__, T5__,
T6__>, -1, 1>
blrm_logit_fast(const std::vector<int>& obs_gidx, const std::vector<int>& n,
                const std::vector<Eigen::Matrix<T2__, -1, -1>>& X_comp,
                const std::vector<std::vector<int>>& finite_cov,
                const Eigen::Matrix<T4__, -1, -1>& X_inter,
                const std::vector<Eigen::Matrix<T5__, -1, 1>>& beta,
                const Eigen::Matrix<T6__, -1, 1>& eta,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__, T4__, T5__, T6__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int num_obs;
    num_obs = std::numeric_limits<int>::min();
    
    current_statement__ = 691;
    num_obs = size(obs_gidx);
    int num_comp;
    num_comp = std::numeric_limits<int>::min();
    
    current_statement__ = 692;
    num_comp = size(X_comp);
    int num_inter;
    num_inter = std::numeric_limits<int>::min();
    
    current_statement__ = 693;
    num_inter = cols(X_inter);
    current_statement__ = 694;
    validate_non_negative_index("mu", "num_obs", num_obs);
    Eigen::Matrix<local_scalar_t__, -1, 1> mu;
    mu = Eigen::Matrix<local_scalar_t__, -1, 1>(num_obs);
    stan::math::fill(mu, DUMMY_VAR__);
    
    current_statement__ = 712;
    for (int i = 1; i <= num_obs; ++i) {
      int idx;
      idx = std::numeric_limits<int>::min();
      
      current_statement__ = 696;
      idx = obs_gidx[(i - 1)];
      local_scalar_t__ log_p0_nr;
      log_p0_nr = DUMMY_VAR__;
      
      current_statement__ = 697;
      log_p0_nr = 0.0;
      current_statement__ = 707;
      if (logical_eq(n[(idx - 1)], 0)) {
        current_statement__ = 705;
        assign(mu, cons_list(index_uni(i), nil_index_list()), 0.0,
          "assigning variable mu");
      } else {
        current_statement__ = 702;
        for (int j = 1; j <= num_comp; ++j) {
          current_statement__ = 700;
          if (finite_cov[(j - 1)][(idx - 1)]) {
            current_statement__ = 698;
            log_p0_nr = (log_p0_nr +
                          log_inv_logit(
                            multiply(
                              multiply(-1.0,
                                rvalue(X_comp,
                                  cons_list(index_uni(j),
                                    cons_list(index_uni(idx),
                                      nil_index_list())), "X_comp")),
                              beta[(j - 1)])));
          } }
        current_statement__ = 703;
        assign(mu, cons_list(index_uni(i), nil_index_list()),
          (log1m_exp(log_p0_nr) - log_p0_nr), "assigning variable mu");
      }
      current_statement__ = 710;
      if (logical_gt(num_inter, 0)) {
        current_statement__ = 708;
        assign(mu, cons_list(index_uni(i), nil_index_list()),
          (mu[(i - 1)] +
            multiply(
              rvalue(X_inter, cons_list(index_uni(idx), nil_index_list()),
                "X_inter"), eta)), "assigning variable mu");
      } }
    current_statement__ = 713;
    return mu;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct blrm_logit_fast_functor__ {
template <typename T2__, typename T4__, typename T5__, typename T6__>
Eigen::Matrix<stan::promote_args_t<T2__, T4__, T5__,
T6__>, -1, 1>
operator()(const std::vector<int>& obs_gidx, const std::vector<int>& n,
           const std::vector<Eigen::Matrix<T2__, -1, -1>>& X_comp,
           const std::vector<std::vector<int>>& finite_cov,
           const Eigen::Matrix<T4__, -1, -1>& X_inter,
           const std::vector<Eigen::Matrix<T5__, -1, 1>>& beta,
           const Eigen::Matrix<T6__, -1, 1>& eta, std::ostream* pstream__)  const 
{
return blrm_logit_fast(obs_gidx, n, X_comp, finite_cov, X_inter, beta, eta,
         pstream__);
}
};

template <bool propto__, typename T3__, typename T5__, typename T6__,
typename T7__>
stan::promote_args_t<T3__, T5__, T6__,
T7__>
blrm_lpmf(const std::vector<int>& r, const std::vector<int>& obs_gidx,
          const std::vector<int>& n,
          const std::vector<Eigen::Matrix<T3__, -1, -1>>& X_comp,
          const std::vector<std::vector<int>>& finite_cov,
          const Eigen::Matrix<T5__, -1, -1>& X_inter,
          const std::vector<Eigen::Matrix<T6__, -1, 1>>& beta,
          const Eigen::Matrix<T7__, -1, 1>& eta, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__, T5__, T6__, T7__>;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int num_obs;
    num_obs = std::numeric_limits<int>::min();
    
    current_statement__ = 715;
    num_obs = size(obs_gidx);
    current_statement__ = 716;
    validate_non_negative_index("r_obs", "num_obs", num_obs);
    std::vector<int> r_obs;
    r_obs = std::vector<int>(num_obs, std::numeric_limits<int>::min());
    
    current_statement__ = 718;
    validate_non_negative_index("n_obs", "num_obs", num_obs);
    std::vector<int> n_obs;
    n_obs = std::vector<int>(num_obs, std::numeric_limits<int>::min());
    
    current_statement__ = 723;
    for (int i = 1; i <= num_obs; ++i) {
      current_statement__ = 720;
      assign(r_obs, cons_list(index_uni(i), nil_index_list()),
        r[(obs_gidx[(i - 1)] - 1)], "assigning variable r_obs");
      current_statement__ = 721;
      assign(n_obs, cons_list(index_uni(i), nil_index_list()),
        n[(obs_gidx[(i - 1)] - 1)], "assigning variable n_obs");}
    current_statement__ = 724;
    return binomial_logit_lpmf<false>(r_obs, n_obs,
             blrm_logit_fast(obs_gidx, n, X_comp, finite_cov, X_inter, beta,
               eta, pstream__));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct blrm_lpmf_functor__ {
template <bool propto__, typename T3__, typename T5__, typename T6__,
typename T7__>
stan::promote_args_t<T3__, T5__, T6__,
T7__>
operator()(const std::vector<int>& r, const std::vector<int>& obs_gidx,
           const std::vector<int>& n,
           const std::vector<Eigen::Matrix<T3__, -1, -1>>& X_comp,
           const std::vector<std::vector<int>>& finite_cov,
           const Eigen::Matrix<T5__, -1, -1>& X_inter,
           const std::vector<Eigen::Matrix<T6__, -1, 1>>& beta,
           const Eigen::Matrix<T7__, -1, 1>& eta, std::ostream* pstream__)  const 
{
return blrm_lpmf<propto__>(r, obs_gidx, n, X_comp, finite_cov, X_inter, beta,
         eta, pstream__);
}
};

template <typename T5__, typename T7__, typename T8__, typename T10__>
Eigen::Matrix<stan::promote_args_t<T5__, T7__, T8__,
T10__>, -1, 1>
blrm_mix_lpmf_comp(const int& g, const int& num_groups,
                   const std::vector<int>& obs_gidx,
                   const std::vector<int>& r, const std::vector<int>& n,
                   const std::vector<Eigen::Matrix<T5__, -1, -1>>& X_comp,
                   const std::vector<std::vector<int>>& finite_cov,
                   const Eigen::Matrix<T7__, -1, -1>& X_inter,
                   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& beta,
                   const std::vector<std::vector<int>>& mix_idx_beta,
                   const std::vector<Eigen::Matrix<T10__, -1, 1>>& eta,
                   const std::vector<std::vector<int>>& mix_idx_eta,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T5__, T7__, T8__, T10__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int num_mix_comp;
    num_mix_comp = std::numeric_limits<int>::min();
    
    current_statement__ = 726;
    num_mix_comp = size(mix_idx_beta);
    int num_comp;
    num_comp = std::numeric_limits<int>::min();
    
    current_statement__ = 727;
    num_comp = dims(mix_idx_beta)[(2 - 1)];
    int num_inter;
    num_inter = std::numeric_limits<int>::min();
    
    current_statement__ = 728;
    num_inter = dims(mix_idx_eta)[(2 - 1)];
    current_statement__ = 729;
    validate_non_negative_index("mix_lpmf", "num_mix_comp", num_mix_comp);
    Eigen::Matrix<local_scalar_t__, -1, 1> mix_lpmf;
    mix_lpmf = Eigen::Matrix<local_scalar_t__, -1, 1>(num_mix_comp);
    stan::math::fill(mix_lpmf, DUMMY_VAR__);
    
    current_statement__ = 732;
    if (logical_eq(num_elements(r), 0)) {
      current_statement__ = 731;
      return rep_vector(0.0, num_mix_comp);
    } 
    current_statement__ = 747;
    for (int m = 1; m <= num_mix_comp; ++m) {
      current_statement__ = 733;
      validate_non_negative_index("ind_beta", "num_comp", num_comp);
      std::vector<int> ind_beta;
      ind_beta = std::vector<int>(num_comp, std::numeric_limits<int>::min());
      
      current_statement__ = 734;
      assign(ind_beta, nil_index_list(), mix_idx_beta[(m - 1)],
        "assigning variable ind_beta");
      current_statement__ = 735;
      validate_non_negative_index("ind_eta", "num_inter", num_inter);
      std::vector<int> ind_eta;
      ind_eta = std::vector<int>(num_inter, std::numeric_limits<int>::min());
      
      current_statement__ = 736;
      assign(ind_eta, nil_index_list(), mix_idx_eta[(m - 1)],
        "assigning variable ind_eta");
      current_statement__ = 737;
      validate_non_negative_index("beta_mix_config", "num_comp", num_comp);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> beta_mix_config;
      beta_mix_config = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(num_comp, Eigen::Matrix<local_scalar_t__, -1, 1>(2));
      stan::math::fill(beta_mix_config, DUMMY_VAR__);
      
      current_statement__ = 739;
      validate_non_negative_index("eta_mix_config", "num_inter", num_inter);
      Eigen::Matrix<local_scalar_t__, -1, 1> eta_mix_config;
      eta_mix_config = Eigen::Matrix<local_scalar_t__, -1, 1>(num_inter);
      stan::math::fill(eta_mix_config, DUMMY_VAR__);
      
      current_statement__ = 742;
      for (int i = 1; i <= num_comp; ++i) {
        current_statement__ = 741;
        assign(beta_mix_config, cons_list(index_uni(i), nil_index_list()),
          beta[((logical_eq(ind_beta[(i - 1)], 1) ? g : (g + num_groups)) -
                 1)][(i - 1)], "assigning variable beta_mix_config");}
      current_statement__ = 744;
      for (int i = 1; i <= num_inter; ++i) {
        current_statement__ = 743;
        assign(eta_mix_config, cons_list(index_uni(i), nil_index_list()),
          eta[((logical_eq(ind_eta[(i - 1)], 1) ? g : (g + num_groups)) - 1)][
          (i - 1)], "assigning variable eta_mix_config");}
      current_statement__ = 745;
      assign(mix_lpmf, cons_list(index_uni(m), nil_index_list()),
        blrm_lpmf<false>(r, obs_gidx, n, X_comp, finite_cov, X_inter,
          beta_mix_config, eta_mix_config, pstream__),
        "assigning variable mix_lpmf");}
    current_statement__ = 748;
    return mix_lpmf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct blrm_mix_lpmf_comp_functor__ {
template <typename T5__, typename T7__, typename T8__, typename T10__>
Eigen::Matrix<stan::promote_args_t<T5__, T7__, T8__,
T10__>, -1, 1>
operator()(const int& g, const int& num_groups,
           const std::vector<int>& obs_gidx, const std::vector<int>& r,
           const std::vector<int>& n,
           const std::vector<Eigen::Matrix<T5__, -1, -1>>& X_comp,
           const std::vector<std::vector<int>>& finite_cov,
           const Eigen::Matrix<T7__, -1, -1>& X_inter,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& beta,
           const std::vector<std::vector<int>>& mix_idx_beta,
           const std::vector<Eigen::Matrix<T10__, -1, 1>>& eta,
           const std::vector<std::vector<int>>& mix_idx_eta,
           std::ostream* pstream__)  const 
{
return blrm_mix_lpmf_comp(g, num_groups, obs_gidx, r, n, X_comp, finite_cov,
         X_inter, beta, mix_idx_beta, eta, mix_idx_eta, pstream__);
}
};

class blrm_exnex_model final : public model_base_crtp<blrm_exnex_model> {

 private:
  int num_obs;
  std::vector<int> r;
  std::vector<int> nr;
  int num_comp;
  std::vector<Eigen::Matrix<double, -1, -1>> X_comp;
  int num_inter;
  Eigen::Matrix<double, -1, -1> X_inter;
  std::vector<int> group;
  std::vector<int> stratum;
  int num_groups;
  int num_strata;
  std::vector<int> group_stratum_cid;
  std::vector<int> prior_is_EXNEX_comp;
  std::vector<int> prior_is_EXNEX_inter;
  Eigen::Matrix<double, -1, -1> prior_EX_prob_comp;
  Eigen::Matrix<double, -1, -1> prior_EX_prob_inter;
  std::vector<Eigen::Matrix<double, -1, 1>> prior_EX_mu_mean_comp;
  std::vector<Eigen::Matrix<double, -1, 1>> prior_EX_mu_sd_comp;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> prior_EX_tau_mean_comp;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> prior_EX_tau_sd_comp;
  std::vector<double> prior_EX_corr_eta_comp;
  Eigen::Matrix<double, -1, 1> prior_EX_mu_mean_inter;
  Eigen::Matrix<double, -1, 1> prior_EX_mu_sd_inter;
  std::vector<Eigen::Matrix<double, -1, 1>> prior_EX_tau_mean_inter;
  std::vector<Eigen::Matrix<double, -1, 1>> prior_EX_tau_sd_inter;
  double prior_EX_corr_eta_inter;
  std::vector<Eigen::Matrix<double, -1, 1>> prior_NEX_mu_mean_comp;
  std::vector<Eigen::Matrix<double, -1, 1>> prior_NEX_mu_sd_comp;
  Eigen::Matrix<double, -1, 1> prior_NEX_mu_mean_inter;
  Eigen::Matrix<double, -1, 1> prior_NEX_mu_sd_inter;
  int prior_tau_dist;
  int prior_PD;
  std::vector<int> n;
  std::vector<std::vector<int>> finite_cov;
  int num_EXNEX_comp;
  int num_EXNEX_inter;
  int num_mix_dim;
  int num_mix_comp;
  std::vector<std::vector<int>> mix_is_EX_beta;
  std::vector<std::vector<int>> mix_is_EX_eta;
  std::vector<std::vector<int>> mix_idx_beta;
  std::vector<std::vector<int>> mix_idx_eta;
  std::vector<int> num_obs_group;
  std::vector<int> num_cases_group;
  std::vector<std::vector<int>> group_obs_idx;
  std::vector<Eigen::Matrix<double, -1, 1>> mix_log_weight;
  int log_beta_raw_1dim__;
  int eta_raw_1dim__;
  int beta_1dim__;
  int eta_1dim__;
 
 public:
  ~blrm_exnex_model() final { }
  
  std::string model_name() const final { return "blrm_exnex_model"; }

  std::vector<std::string> model_compile_info() const {
    std::vector<std::string> stanc_info;
    stanc_info.push_back("stanc_version = stanc3 a9852998");
    stanc_info.push_back("stancflags = ");
    return stanc_info;
  }
  
  
  blrm_exnex_model(stan::io::var_context& context__,
                   unsigned int random_seed__ = 0,
                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "blrm_exnex_model_namespace::blrm_exnex_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 122;
      context__.validate_dims("data initialization","num_obs","int",
          context__.to_vec());
      num_obs = std::numeric_limits<int>::min();
      
      current_statement__ = 122;
      num_obs = context__.vals_i("num_obs")[(1 - 1)];
      current_statement__ = 122;
      current_statement__ = 122;
      check_greater_or_equal(function__, "num_obs", num_obs, 0);
      current_statement__ = 123;
      validate_non_negative_index("r", "num_obs", num_obs);
      current_statement__ = 124;
      context__.validate_dims("data initialization","r","int",
          context__.to_vec(num_obs));
      r = std::vector<int>(num_obs, std::numeric_limits<int>::min());
      
      current_statement__ = 124;
      assign(r, nil_index_list(), context__.vals_i("r"),
        "assigning variable r");
      current_statement__ = 124;
      for (int sym1__ = 1; sym1__ <= num_obs; ++sym1__) {
        current_statement__ = 124;
        current_statement__ = 124;
        check_greater_or_equal(function__, "r[sym1__]", r[(sym1__ - 1)], 0);}
      current_statement__ = 125;
      validate_non_negative_index("nr", "num_obs", num_obs);
      current_statement__ = 126;
      context__.validate_dims("data initialization","nr","int",
          context__.to_vec(num_obs));
      nr = std::vector<int>(num_obs, std::numeric_limits<int>::min());
      
      current_statement__ = 126;
      assign(nr, nil_index_list(), context__.vals_i("nr"),
        "assigning variable nr");
      current_statement__ = 126;
      for (int sym1__ = 1; sym1__ <= num_obs; ++sym1__) {
        current_statement__ = 126;
        current_statement__ = 126;
        check_greater_or_equal(function__, "nr[sym1__]", nr[(sym1__ - 1)], 0);
      }
      current_statement__ = 127;
      context__.validate_dims("data initialization","num_comp","int",
          context__.to_vec());
      num_comp = std::numeric_limits<int>::min();
      
      current_statement__ = 127;
      num_comp = context__.vals_i("num_comp")[(1 - 1)];
      current_statement__ = 127;
      current_statement__ = 127;
      check_greater_or_equal(function__, "num_comp", num_comp, 1);
      current_statement__ = 128;
      validate_non_negative_index("X_comp", "num_comp", num_comp);
      current_statement__ = 129;
      validate_non_negative_index("X_comp", "num_obs", num_obs);
      current_statement__ = 130;
      context__.validate_dims("data initialization","X_comp","double",
          context__.to_vec(num_comp, num_obs, 2));
      X_comp = std::vector<Eigen::Matrix<double, -1, -1>>(num_comp, Eigen::Matrix<double, -1, -1>(num_obs, 2));
      stan::math::fill(X_comp, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_comp_flat__;
        current_statement__ = 130;
        assign(X_comp_flat__, nil_index_list(), context__.vals_r("X_comp"),
          "assigning variable X_comp_flat__");
        current_statement__ = 130;
        pos__ = 1;
        current_statement__ = 130;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 130;
          for (int sym2__ = 1; sym2__ <= num_obs; ++sym2__) {
            current_statement__ = 130;
            for (int sym3__ = 1; sym3__ <= num_comp; ++sym3__) {
              current_statement__ = 130;
              assign(X_comp,
                cons_list(index_uni(sym3__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list()))),
                X_comp_flat__[(pos__ - 1)], "assigning variable X_comp");
              current_statement__ = 130;
              pos__ = (pos__ + 1);}}}
      }
      current_statement__ = 131;
      context__.validate_dims("data initialization","num_inter","int",
          context__.to_vec());
      num_inter = std::numeric_limits<int>::min();
      
      current_statement__ = 131;
      num_inter = context__.vals_i("num_inter")[(1 - 1)];
      current_statement__ = 131;
      current_statement__ = 131;
      check_greater_or_equal(function__, "num_inter", num_inter, 0);
      current_statement__ = 132;
      validate_non_negative_index("X_inter", "num_obs", num_obs);
      current_statement__ = 133;
      validate_non_negative_index("X_inter", "num_inter", num_inter);
      current_statement__ = 134;
      context__.validate_dims("data initialization","X_inter","double",
          context__.to_vec(num_obs, num_inter));
      X_inter = Eigen::Matrix<double, -1, -1>(num_obs, num_inter);
      stan::math::fill(X_inter, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_inter_flat__;
        current_statement__ = 134;
        assign(X_inter_flat__, nil_index_list(), context__.vals_r("X_inter"),
          "assigning variable X_inter_flat__");
        current_statement__ = 134;
        pos__ = 1;
        current_statement__ = 134;
        for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
          current_statement__ = 134;
          for (int sym2__ = 1; sym2__ <= num_obs; ++sym2__) {
            current_statement__ = 134;
            assign(X_inter,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_inter_flat__[(pos__ - 1)], "assigning variable X_inter");
            current_statement__ = 134;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 135;
      validate_non_negative_index("group", "num_obs", num_obs);
      current_statement__ = 136;
      context__.validate_dims("data initialization","group","int",
          context__.to_vec(num_obs));
      group = std::vector<int>(num_obs, std::numeric_limits<int>::min());
      
      current_statement__ = 136;
      assign(group, nil_index_list(), context__.vals_i("group"),
        "assigning variable group");
      current_statement__ = 136;
      for (int sym1__ = 1; sym1__ <= num_obs; ++sym1__) {
        current_statement__ = 136;
        current_statement__ = 136;
        check_greater_or_equal(function__, "group[sym1__]",
                               group[(sym1__ - 1)], 1);}
      current_statement__ = 137;
      validate_non_negative_index("stratum", "num_obs", num_obs);
      current_statement__ = 138;
      context__.validate_dims("data initialization","stratum","int",
          context__.to_vec(num_obs));
      stratum = std::vector<int>(num_obs, std::numeric_limits<int>::min());
      
      current_statement__ = 138;
      assign(stratum, nil_index_list(), context__.vals_i("stratum"),
        "assigning variable stratum");
      current_statement__ = 138;
      for (int sym1__ = 1; sym1__ <= num_obs; ++sym1__) {
        current_statement__ = 138;
        current_statement__ = 138;
        check_greater_or_equal(function__, "stratum[sym1__]",
                               stratum[(sym1__ - 1)], 1);}
      current_statement__ = 139;
      context__.validate_dims("data initialization","num_groups","int",
          context__.to_vec());
      num_groups = std::numeric_limits<int>::min();
      
      current_statement__ = 139;
      num_groups = context__.vals_i("num_groups")[(1 - 1)];
      current_statement__ = 139;
      current_statement__ = 139;
      check_greater_or_equal(function__, "num_groups", num_groups, 1);
      current_statement__ = 140;
      context__.validate_dims("data initialization","num_strata","int",
          context__.to_vec());
      num_strata = std::numeric_limits<int>::min();
      
      current_statement__ = 140;
      num_strata = context__.vals_i("num_strata")[(1 - 1)];
      current_statement__ = 140;
      current_statement__ = 140;
      check_greater_or_equal(function__, "num_strata", num_strata, 1);
      current_statement__ = 141;
      validate_non_negative_index("group_stratum_cid", "num_groups",
                                  num_groups);
      current_statement__ = 142;
      context__.validate_dims("data initialization","group_stratum_cid",
          "int",context__.to_vec(num_groups));
      group_stratum_cid = std::vector<int>(num_groups, std::numeric_limits<int>::min());
      
      current_statement__ = 142;
      assign(group_stratum_cid, nil_index_list(),
        context__.vals_i("group_stratum_cid"),
        "assigning variable group_stratum_cid");
      current_statement__ = 142;
      for (int sym1__ = 1; sym1__ <= num_groups; ++sym1__) {
        current_statement__ = 142;
        current_statement__ = 142;
        check_greater_or_equal(function__, "group_stratum_cid[sym1__]",
                               group_stratum_cid[(sym1__ - 1)], 1);}
      current_statement__ = 142;
      for (int sym1__ = 1; sym1__ <= num_groups; ++sym1__) {
        current_statement__ = 142;
        current_statement__ = 142;
        check_less_or_equal(function__, "group_stratum_cid[sym1__]",
                            group_stratum_cid[(sym1__ - 1)], num_strata);}
      current_statement__ = 143;
      validate_non_negative_index("prior_is_EXNEX_comp", "num_comp", num_comp);
      current_statement__ = 144;
      context__.validate_dims("data initialization","prior_is_EXNEX_comp",
          "int",context__.to_vec(num_comp));
      prior_is_EXNEX_comp = std::vector<int>(num_comp, std::numeric_limits<int>::min());
      
      current_statement__ = 144;
      assign(prior_is_EXNEX_comp, nil_index_list(),
        context__.vals_i("prior_is_EXNEX_comp"),
        "assigning variable prior_is_EXNEX_comp");
      current_statement__ = 144;
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        current_statement__ = 144;
        current_statement__ = 144;
        check_greater_or_equal(function__, "prior_is_EXNEX_comp[sym1__]",
                               prior_is_EXNEX_comp[(sym1__ - 1)], 0);}
      current_statement__ = 144;
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        current_statement__ = 144;
        current_statement__ = 144;
        check_less_or_equal(function__, "prior_is_EXNEX_comp[sym1__]",
                            prior_is_EXNEX_comp[(sym1__ - 1)], 1);}
      current_statement__ = 145;
      validate_non_negative_index("prior_is_EXNEX_inter", "num_inter",
                                  num_inter);
      current_statement__ = 146;
      context__.validate_dims("data initialization","prior_is_EXNEX_inter",
          "int",context__.to_vec(num_inter));
      prior_is_EXNEX_inter = std::vector<int>(num_inter, std::numeric_limits<int>::min());
      
      current_statement__ = 146;
      assign(prior_is_EXNEX_inter, nil_index_list(),
        context__.vals_i("prior_is_EXNEX_inter"),
        "assigning variable prior_is_EXNEX_inter");
      current_statement__ = 146;
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        current_statement__ = 146;
        current_statement__ = 146;
        check_greater_or_equal(function__, "prior_is_EXNEX_inter[sym1__]",
                               prior_is_EXNEX_inter[(sym1__ - 1)], 0);}
      current_statement__ = 146;
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        current_statement__ = 146;
        current_statement__ = 146;
        check_less_or_equal(function__, "prior_is_EXNEX_inter[sym1__]",
                            prior_is_EXNEX_inter[(sym1__ - 1)], 1);}
      current_statement__ = 147;
      validate_non_negative_index("prior_EX_prob_comp", "num_groups",
                                  num_groups);
      current_statement__ = 148;
      validate_non_negative_index("prior_EX_prob_comp", "num_comp", num_comp);
      current_statement__ = 149;
      context__.validate_dims("data initialization","prior_EX_prob_comp",
          "double",context__.to_vec(num_groups, num_comp));
      prior_EX_prob_comp = Eigen::Matrix<double, -1, -1>(num_groups, num_comp);
      stan::math::fill(prior_EX_prob_comp, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_EX_prob_comp_flat__;
        current_statement__ = 149;
        assign(prior_EX_prob_comp_flat__, nil_index_list(),
          context__.vals_r("prior_EX_prob_comp"),
          "assigning variable prior_EX_prob_comp_flat__");
        current_statement__ = 149;
        pos__ = 1;
        current_statement__ = 149;
        for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
          current_statement__ = 149;
          for (int sym2__ = 1; sym2__ <= num_groups; ++sym2__) {
            current_statement__ = 149;
            assign(prior_EX_prob_comp,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_EX_prob_comp_flat__[(pos__ - 1)],
              "assigning variable prior_EX_prob_comp");
            current_statement__ = 149;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 149;
      for (int sym1__ = 1; sym1__ <= num_groups; ++sym1__) {
        current_statement__ = 149;
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          current_statement__ = 149;
          current_statement__ = 149;
          check_greater_or_equal(function__,
                                 "prior_EX_prob_comp[sym1__, sym2__]",
                                 rvalue(prior_EX_prob_comp,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())),
                                   "prior_EX_prob_comp"), 1E-6);}}
      current_statement__ = 149;
      for (int sym1__ = 1; sym1__ <= num_groups; ++sym1__) {
        current_statement__ = 149;
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          current_statement__ = 149;
          current_statement__ = 149;
          check_less_or_equal(function__,
                              "prior_EX_prob_comp[sym1__, sym2__]",
                              rvalue(prior_EX_prob_comp,
                                cons_list(index_uni(sym1__),
                                  cons_list(index_uni(sym2__),
                                    nil_index_list())), "prior_EX_prob_comp"),
                              1);}}
      current_statement__ = 150;
      validate_non_negative_index("prior_EX_prob_inter", "num_groups",
                                  num_groups);
      current_statement__ = 151;
      validate_non_negative_index("prior_EX_prob_inter", "num_inter",
                                  num_inter);
      current_statement__ = 152;
      context__.validate_dims("data initialization","prior_EX_prob_inter",
          "double",context__.to_vec(num_groups, num_inter));
      prior_EX_prob_inter = Eigen::Matrix<double, -1, -1>(num_groups, num_inter);
      stan::math::fill(prior_EX_prob_inter, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_EX_prob_inter_flat__;
        current_statement__ = 152;
        assign(prior_EX_prob_inter_flat__, nil_index_list(),
          context__.vals_r("prior_EX_prob_inter"),
          "assigning variable prior_EX_prob_inter_flat__");
        current_statement__ = 152;
        pos__ = 1;
        current_statement__ = 152;
        for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
          current_statement__ = 152;
          for (int sym2__ = 1; sym2__ <= num_groups; ++sym2__) {
            current_statement__ = 152;
            assign(prior_EX_prob_inter,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_EX_prob_inter_flat__[(pos__ - 1)],
              "assigning variable prior_EX_prob_inter");
            current_statement__ = 152;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 152;
      for (int sym1__ = 1; sym1__ <= num_groups; ++sym1__) {
        current_statement__ = 152;
        for (int sym2__ = 1; sym2__ <= num_inter; ++sym2__) {
          current_statement__ = 152;
          current_statement__ = 152;
          check_greater_or_equal(function__,
                                 "prior_EX_prob_inter[sym1__, sym2__]",
                                 rvalue(prior_EX_prob_inter,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())),
                                   "prior_EX_prob_inter"), 1E-6);}}
      current_statement__ = 152;
      for (int sym1__ = 1; sym1__ <= num_groups; ++sym1__) {
        current_statement__ = 152;
        for (int sym2__ = 1; sym2__ <= num_inter; ++sym2__) {
          current_statement__ = 152;
          current_statement__ = 152;
          check_less_or_equal(function__,
                              "prior_EX_prob_inter[sym1__, sym2__]",
                              rvalue(prior_EX_prob_inter,
                                cons_list(index_uni(sym1__),
                                  cons_list(index_uni(sym2__),
                                    nil_index_list())),
                                "prior_EX_prob_inter"), 1);}}
      current_statement__ = 153;
      validate_non_negative_index("prior_EX_mu_mean_comp", "num_comp",
                                  num_comp);
      current_statement__ = 154;
      context__.validate_dims("data initialization","prior_EX_mu_mean_comp",
          "double",context__.to_vec(num_comp, 2));
      prior_EX_mu_mean_comp = std::vector<Eigen::Matrix<double, -1, 1>>(num_comp, Eigen::Matrix<double, -1, 1>(2));
      stan::math::fill(prior_EX_mu_mean_comp, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_EX_mu_mean_comp_flat__;
        current_statement__ = 154;
        assign(prior_EX_mu_mean_comp_flat__, nil_index_list(),
          context__.vals_r("prior_EX_mu_mean_comp"),
          "assigning variable prior_EX_mu_mean_comp_flat__");
        current_statement__ = 154;
        pos__ = 1;
        current_statement__ = 154;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 154;
          for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
            current_statement__ = 154;
            assign(prior_EX_mu_mean_comp,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_EX_mu_mean_comp_flat__[(pos__ - 1)],
              "assigning variable prior_EX_mu_mean_comp");
            current_statement__ = 154;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 155;
      validate_non_negative_index("prior_EX_mu_sd_comp", "num_comp", num_comp);
      current_statement__ = 156;
      context__.validate_dims("data initialization","prior_EX_mu_sd_comp",
          "double",context__.to_vec(num_comp, 2));
      prior_EX_mu_sd_comp = std::vector<Eigen::Matrix<double, -1, 1>>(num_comp, Eigen::Matrix<double, -1, 1>(2));
      stan::math::fill(prior_EX_mu_sd_comp, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_EX_mu_sd_comp_flat__;
        current_statement__ = 156;
        assign(prior_EX_mu_sd_comp_flat__, nil_index_list(),
          context__.vals_r("prior_EX_mu_sd_comp"),
          "assigning variable prior_EX_mu_sd_comp_flat__");
        current_statement__ = 156;
        pos__ = 1;
        current_statement__ = 156;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 156;
          for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
            current_statement__ = 156;
            assign(prior_EX_mu_sd_comp,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_EX_mu_sd_comp_flat__[(pos__ - 1)],
              "assigning variable prior_EX_mu_sd_comp");
            current_statement__ = 156;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 156;
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        current_statement__ = 156;
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          current_statement__ = 156;
          current_statement__ = 156;
          check_greater_or_equal(function__,
                                 "prior_EX_mu_sd_comp[sym1__, sym2__]",
                                 prior_EX_mu_sd_comp[(sym1__ - 1)][(sym2__ -
                                                                    1)], 0);}
      }
      current_statement__ = 157;
      validate_non_negative_index("prior_EX_tau_mean_comp", "num_strata",
                                  num_strata);
      current_statement__ = 158;
      validate_non_negative_index("prior_EX_tau_mean_comp", "num_comp",
                                  num_comp);
      current_statement__ = 159;
      context__.validate_dims("data initialization","prior_EX_tau_mean_comp",
          "double",context__.to_vec(num_strata, num_comp, 2));
      prior_EX_tau_mean_comp = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(num_strata, std::vector<Eigen::Matrix<double, -1, 1>>(num_comp, Eigen::Matrix<double, -1, 1>(2)));
      stan::math::fill(prior_EX_tau_mean_comp, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_EX_tau_mean_comp_flat__;
        current_statement__ = 159;
        assign(prior_EX_tau_mean_comp_flat__, nil_index_list(),
          context__.vals_r("prior_EX_tau_mean_comp"),
          "assigning variable prior_EX_tau_mean_comp_flat__");
        current_statement__ = 159;
        pos__ = 1;
        current_statement__ = 159;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 159;
          for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
            current_statement__ = 159;
            for (int sym3__ = 1; sym3__ <= num_strata; ++sym3__) {
              current_statement__ = 159;
              assign(prior_EX_tau_mean_comp,
                cons_list(index_uni(sym3__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list()))),
                prior_EX_tau_mean_comp_flat__[(pos__ - 1)],
                "assigning variable prior_EX_tau_mean_comp");
              current_statement__ = 159;
              pos__ = (pos__ + 1);}}}
      }
      current_statement__ = 160;
      validate_non_negative_index("prior_EX_tau_sd_comp", "num_strata",
                                  num_strata);
      current_statement__ = 161;
      validate_non_negative_index("prior_EX_tau_sd_comp", "num_comp",
                                  num_comp);
      current_statement__ = 162;
      context__.validate_dims("data initialization","prior_EX_tau_sd_comp",
          "double",context__.to_vec(num_strata, num_comp, 2));
      prior_EX_tau_sd_comp = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(num_strata, std::vector<Eigen::Matrix<double, -1, 1>>(num_comp, Eigen::Matrix<double, -1, 1>(2)));
      stan::math::fill(prior_EX_tau_sd_comp, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_EX_tau_sd_comp_flat__;
        current_statement__ = 162;
        assign(prior_EX_tau_sd_comp_flat__, nil_index_list(),
          context__.vals_r("prior_EX_tau_sd_comp"),
          "assigning variable prior_EX_tau_sd_comp_flat__");
        current_statement__ = 162;
        pos__ = 1;
        current_statement__ = 162;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 162;
          for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
            current_statement__ = 162;
            for (int sym3__ = 1; sym3__ <= num_strata; ++sym3__) {
              current_statement__ = 162;
              assign(prior_EX_tau_sd_comp,
                cons_list(index_uni(sym3__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list()))),
                prior_EX_tau_sd_comp_flat__[(pos__ - 1)],
                "assigning variable prior_EX_tau_sd_comp");
              current_statement__ = 162;
              pos__ = (pos__ + 1);}}}
      }
      current_statement__ = 162;
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        current_statement__ = 162;
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          current_statement__ = 162;
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            current_statement__ = 162;
            current_statement__ = 162;
            check_greater_or_equal(function__,
                                   "prior_EX_tau_sd_comp[sym1__, sym2__, sym3__]",
                                   prior_EX_tau_sd_comp[(sym1__ - 1)][
                                   (sym2__ - 1)][(sym3__ - 1)], 0);}}}
      current_statement__ = 163;
      validate_non_negative_index("prior_EX_corr_eta_comp", "num_comp",
                                  num_comp);
      current_statement__ = 164;
      context__.validate_dims("data initialization","prior_EX_corr_eta_comp",
          "double",context__.to_vec(num_comp));
      prior_EX_corr_eta_comp = std::vector<double>(num_comp, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 164;
      assign(prior_EX_corr_eta_comp, nil_index_list(),
        context__.vals_r("prior_EX_corr_eta_comp"),
        "assigning variable prior_EX_corr_eta_comp");
      current_statement__ = 164;
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        current_statement__ = 164;
        current_statement__ = 164;
        check_greater_or_equal(function__, "prior_EX_corr_eta_comp[sym1__]",
                               prior_EX_corr_eta_comp[(sym1__ - 1)], 0);}
      current_statement__ = 165;
      validate_non_negative_index("prior_EX_mu_mean_inter", "num_inter",
                                  num_inter);
      current_statement__ = 166;
      context__.validate_dims("data initialization","prior_EX_mu_mean_inter",
          "double",context__.to_vec(num_inter));
      prior_EX_mu_mean_inter = Eigen::Matrix<double, -1, 1>(num_inter);
      stan::math::fill(prior_EX_mu_mean_inter, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_EX_mu_mean_inter_flat__;
        current_statement__ = 166;
        assign(prior_EX_mu_mean_inter_flat__, nil_index_list(),
          context__.vals_r("prior_EX_mu_mean_inter"),
          "assigning variable prior_EX_mu_mean_inter_flat__");
        current_statement__ = 166;
        pos__ = 1;
        current_statement__ = 166;
        for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
          current_statement__ = 166;
          assign(prior_EX_mu_mean_inter,
            cons_list(index_uni(sym1__), nil_index_list()),
            prior_EX_mu_mean_inter_flat__[(pos__ - 1)],
            "assigning variable prior_EX_mu_mean_inter");
          current_statement__ = 166;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 167;
      validate_non_negative_index("prior_EX_mu_sd_inter", "num_inter",
                                  num_inter);
      current_statement__ = 168;
      context__.validate_dims("data initialization","prior_EX_mu_sd_inter",
          "double",context__.to_vec(num_inter));
      prior_EX_mu_sd_inter = Eigen::Matrix<double, -1, 1>(num_inter);
      stan::math::fill(prior_EX_mu_sd_inter, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_EX_mu_sd_inter_flat__;
        current_statement__ = 168;
        assign(prior_EX_mu_sd_inter_flat__, nil_index_list(),
          context__.vals_r("prior_EX_mu_sd_inter"),
          "assigning variable prior_EX_mu_sd_inter_flat__");
        current_statement__ = 168;
        pos__ = 1;
        current_statement__ = 168;
        for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
          current_statement__ = 168;
          assign(prior_EX_mu_sd_inter,
            cons_list(index_uni(sym1__), nil_index_list()),
            prior_EX_mu_sd_inter_flat__[(pos__ - 1)],
            "assigning variable prior_EX_mu_sd_inter");
          current_statement__ = 168;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 168;
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        current_statement__ = 168;
        current_statement__ = 168;
        check_greater_or_equal(function__, "prior_EX_mu_sd_inter[sym1__]",
                               prior_EX_mu_sd_inter[(sym1__ - 1)], 0);}
      current_statement__ = 169;
      validate_non_negative_index("prior_EX_tau_mean_inter", "num_strata",
                                  num_strata);
      current_statement__ = 170;
      validate_non_negative_index("prior_EX_tau_mean_inter", "num_inter",
                                  num_inter);
      current_statement__ = 171;
      context__.validate_dims("data initialization",
          "prior_EX_tau_mean_inter","double",
          context__.to_vec(num_strata, num_inter));
      prior_EX_tau_mean_inter = std::vector<Eigen::Matrix<double, -1, 1>>(num_strata, Eigen::Matrix<double, -1, 1>(num_inter));
      stan::math::fill(prior_EX_tau_mean_inter, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_EX_tau_mean_inter_flat__;
        current_statement__ = 171;
        assign(prior_EX_tau_mean_inter_flat__, nil_index_list(),
          context__.vals_r("prior_EX_tau_mean_inter"),
          "assigning variable prior_EX_tau_mean_inter_flat__");
        current_statement__ = 171;
        pos__ = 1;
        current_statement__ = 171;
        for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
          current_statement__ = 171;
          for (int sym2__ = 1; sym2__ <= num_strata; ++sym2__) {
            current_statement__ = 171;
            assign(prior_EX_tau_mean_inter,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_EX_tau_mean_inter_flat__[(pos__ - 1)],
              "assigning variable prior_EX_tau_mean_inter");
            current_statement__ = 171;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 172;
      validate_non_negative_index("prior_EX_tau_sd_inter", "num_strata",
                                  num_strata);
      current_statement__ = 173;
      validate_non_negative_index("prior_EX_tau_sd_inter", "num_inter",
                                  num_inter);
      current_statement__ = 174;
      context__.validate_dims("data initialization","prior_EX_tau_sd_inter",
          "double",context__.to_vec(num_strata, num_inter));
      prior_EX_tau_sd_inter = std::vector<Eigen::Matrix<double, -1, 1>>(num_strata, Eigen::Matrix<double, -1, 1>(num_inter));
      stan::math::fill(prior_EX_tau_sd_inter, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_EX_tau_sd_inter_flat__;
        current_statement__ = 174;
        assign(prior_EX_tau_sd_inter_flat__, nil_index_list(),
          context__.vals_r("prior_EX_tau_sd_inter"),
          "assigning variable prior_EX_tau_sd_inter_flat__");
        current_statement__ = 174;
        pos__ = 1;
        current_statement__ = 174;
        for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
          current_statement__ = 174;
          for (int sym2__ = 1; sym2__ <= num_strata; ++sym2__) {
            current_statement__ = 174;
            assign(prior_EX_tau_sd_inter,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_EX_tau_sd_inter_flat__[(pos__ - 1)],
              "assigning variable prior_EX_tau_sd_inter");
            current_statement__ = 174;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 174;
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        current_statement__ = 174;
        for (int sym2__ = 1; sym2__ <= num_inter; ++sym2__) {
          current_statement__ = 174;
          current_statement__ = 174;
          check_greater_or_equal(function__,
                                 "prior_EX_tau_sd_inter[sym1__, sym2__]",
                                 prior_EX_tau_sd_inter[(sym1__ - 1)][
                                 (sym2__ - 1)], 0);}}
      current_statement__ = 175;
      context__.validate_dims("data initialization",
          "prior_EX_corr_eta_inter","double",context__.to_vec());
      prior_EX_corr_eta_inter = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 175;
      prior_EX_corr_eta_inter = context__.vals_r("prior_EX_corr_eta_inter")[
          (1 - 1)];
      current_statement__ = 175;
      current_statement__ = 175;
      check_greater_or_equal(function__, "prior_EX_corr_eta_inter",
                             prior_EX_corr_eta_inter, 0);
      current_statement__ = 176;
      validate_non_negative_index("prior_NEX_mu_mean_comp", "num_comp",
                                  num_comp);
      current_statement__ = 177;
      context__.validate_dims("data initialization","prior_NEX_mu_mean_comp",
          "double",context__.to_vec(num_comp, 2));
      prior_NEX_mu_mean_comp = std::vector<Eigen::Matrix<double, -1, 1>>(num_comp, Eigen::Matrix<double, -1, 1>(2));
      stan::math::fill(prior_NEX_mu_mean_comp, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_NEX_mu_mean_comp_flat__;
        current_statement__ = 177;
        assign(prior_NEX_mu_mean_comp_flat__, nil_index_list(),
          context__.vals_r("prior_NEX_mu_mean_comp"),
          "assigning variable prior_NEX_mu_mean_comp_flat__");
        current_statement__ = 177;
        pos__ = 1;
        current_statement__ = 177;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 177;
          for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
            current_statement__ = 177;
            assign(prior_NEX_mu_mean_comp,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_NEX_mu_mean_comp_flat__[(pos__ - 1)],
              "assigning variable prior_NEX_mu_mean_comp");
            current_statement__ = 177;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 178;
      validate_non_negative_index("prior_NEX_mu_sd_comp", "num_comp",
                                  num_comp);
      current_statement__ = 179;
      context__.validate_dims("data initialization","prior_NEX_mu_sd_comp",
          "double",context__.to_vec(num_comp, 2));
      prior_NEX_mu_sd_comp = std::vector<Eigen::Matrix<double, -1, 1>>(num_comp, Eigen::Matrix<double, -1, 1>(2));
      stan::math::fill(prior_NEX_mu_sd_comp, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_NEX_mu_sd_comp_flat__;
        current_statement__ = 179;
        assign(prior_NEX_mu_sd_comp_flat__, nil_index_list(),
          context__.vals_r("prior_NEX_mu_sd_comp"),
          "assigning variable prior_NEX_mu_sd_comp_flat__");
        current_statement__ = 179;
        pos__ = 1;
        current_statement__ = 179;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 179;
          for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
            current_statement__ = 179;
            assign(prior_NEX_mu_sd_comp,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_NEX_mu_sd_comp_flat__[(pos__ - 1)],
              "assigning variable prior_NEX_mu_sd_comp");
            current_statement__ = 179;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 179;
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        current_statement__ = 179;
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          current_statement__ = 179;
          current_statement__ = 179;
          check_greater_or_equal(function__,
                                 "prior_NEX_mu_sd_comp[sym1__, sym2__]",
                                 prior_NEX_mu_sd_comp[(sym1__ - 1)][(sym2__ -
                                                                    1)], 0);}
      }
      current_statement__ = 180;
      validate_non_negative_index("prior_NEX_mu_mean_inter", "num_inter",
                                  num_inter);
      current_statement__ = 181;
      context__.validate_dims("data initialization",
          "prior_NEX_mu_mean_inter","double",context__.to_vec(num_inter));
      prior_NEX_mu_mean_inter = Eigen::Matrix<double, -1, 1>(num_inter);
      stan::math::fill(prior_NEX_mu_mean_inter, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_NEX_mu_mean_inter_flat__;
        current_statement__ = 181;
        assign(prior_NEX_mu_mean_inter_flat__, nil_index_list(),
          context__.vals_r("prior_NEX_mu_mean_inter"),
          "assigning variable prior_NEX_mu_mean_inter_flat__");
        current_statement__ = 181;
        pos__ = 1;
        current_statement__ = 181;
        for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
          current_statement__ = 181;
          assign(prior_NEX_mu_mean_inter,
            cons_list(index_uni(sym1__), nil_index_list()),
            prior_NEX_mu_mean_inter_flat__[(pos__ - 1)],
            "assigning variable prior_NEX_mu_mean_inter");
          current_statement__ = 181;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 182;
      validate_non_negative_index("prior_NEX_mu_sd_inter", "num_inter",
                                  num_inter);
      current_statement__ = 183;
      context__.validate_dims("data initialization","prior_NEX_mu_sd_inter",
          "double",context__.to_vec(num_inter));
      prior_NEX_mu_sd_inter = Eigen::Matrix<double, -1, 1>(num_inter);
      stan::math::fill(prior_NEX_mu_sd_inter, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_NEX_mu_sd_inter_flat__;
        current_statement__ = 183;
        assign(prior_NEX_mu_sd_inter_flat__, nil_index_list(),
          context__.vals_r("prior_NEX_mu_sd_inter"),
          "assigning variable prior_NEX_mu_sd_inter_flat__");
        current_statement__ = 183;
        pos__ = 1;
        current_statement__ = 183;
        for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
          current_statement__ = 183;
          assign(prior_NEX_mu_sd_inter,
            cons_list(index_uni(sym1__), nil_index_list()),
            prior_NEX_mu_sd_inter_flat__[(pos__ - 1)],
            "assigning variable prior_NEX_mu_sd_inter");
          current_statement__ = 183;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 183;
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        current_statement__ = 183;
        current_statement__ = 183;
        check_greater_or_equal(function__, "prior_NEX_mu_sd_inter[sym1__]",
                               prior_NEX_mu_sd_inter[(sym1__ - 1)], 0);}
      current_statement__ = 184;
      context__.validate_dims("data initialization","prior_tau_dist","int",
          context__.to_vec());
      prior_tau_dist = std::numeric_limits<int>::min();
      
      current_statement__ = 184;
      prior_tau_dist = context__.vals_i("prior_tau_dist")[(1 - 1)];
      current_statement__ = 184;
      current_statement__ = 184;
      check_greater_or_equal(function__, "prior_tau_dist", prior_tau_dist, 0);
      current_statement__ = 184;
      current_statement__ = 184;
      check_less_or_equal(function__, "prior_tau_dist", prior_tau_dist, 2);
      current_statement__ = 185;
      context__.validate_dims("data initialization","prior_PD","int",
          context__.to_vec());
      prior_PD = std::numeric_limits<int>::min();
      
      current_statement__ = 185;
      prior_PD = context__.vals_i("prior_PD")[(1 - 1)];
      current_statement__ = 185;
      current_statement__ = 185;
      check_greater_or_equal(function__, "prior_PD", prior_PD, 0);
      current_statement__ = 185;
      current_statement__ = 185;
      check_less_or_equal(function__, "prior_PD", prior_PD, 1);
      current_statement__ = 186;
      validate_non_negative_index("n", "num_obs", num_obs);
      current_statement__ = 187;
      n = std::vector<int>(num_obs, std::numeric_limits<int>::min());
      
      current_statement__ = 188;
      validate_non_negative_index("finite_cov", "num_comp", num_comp);
      current_statement__ = 189;
      validate_non_negative_index("finite_cov", "num_obs", num_obs);
      current_statement__ = 190;
      finite_cov = std::vector<std::vector<int>>(num_comp, std::vector<int>(num_obs, std::numeric_limits<int>::min()));
      
      current_statement__ = 191;
      num_EXNEX_comp = std::numeric_limits<int>::min();
      
      current_statement__ = 191;
      num_EXNEX_comp = sum(prior_is_EXNEX_comp);
      current_statement__ = 192;
      num_EXNEX_inter = std::numeric_limits<int>::min();
      
      current_statement__ = 192;
      num_EXNEX_inter = sum(prior_is_EXNEX_inter);
      current_statement__ = 193;
      num_mix_dim = std::numeric_limits<int>::min();
      
      current_statement__ = 193;
      num_mix_dim = (num_EXNEX_comp + num_EXNEX_inter);
      current_statement__ = 194;
      num_mix_comp = std::numeric_limits<int>::min();
      
      current_statement__ = 194;
      num_mix_comp = power_int(2, num_mix_dim, pstream__);
      current_statement__ = 195;
      validate_non_negative_index("mix_is_EX_beta", "num_EXNEX_comp",
                                  num_EXNEX_comp);
      current_statement__ = 196;
      validate_non_negative_index("mix_is_EX_beta",
                                  "num_mix_dim == 0 ? 0 : power_int(2, num_mix_dim - 1)",
                                  (logical_eq(num_mix_dim, 0) ? 0 :
                                     power_int(2,
                                       (num_mix_dim - 1), pstream__)));
      current_statement__ = 197;
      mix_is_EX_beta = std::vector<std::vector<int>>(num_EXNEX_comp, std::vector<int>((
        logical_eq(num_mix_dim, 0) ? 0 :
          power_int(2, (num_mix_dim - 1), pstream__)), std::numeric_limits<int>::min()));
      
      current_statement__ = 198;
      validate_non_negative_index("mix_is_EX_eta", "num_EXNEX_inter",
                                  num_EXNEX_inter);
      current_statement__ = 199;
      validate_non_negative_index("mix_is_EX_eta",
                                  "num_mix_dim == 0 ? 0 : power_int(2, num_mix_dim - 1)",
                                  (logical_eq(num_mix_dim, 0) ? 0 :
                                     power_int(2,
                                       (num_mix_dim - 1), pstream__)));
      current_statement__ = 200;
      mix_is_EX_eta = std::vector<std::vector<int>>(num_EXNEX_inter, std::vector<int>((
        logical_eq(num_mix_dim, 0) ? 0 :
          power_int(2, (num_mix_dim - 1), pstream__)), std::numeric_limits<int>::min()));
      
      current_statement__ = 201;
      validate_non_negative_index("mix_idx_beta", "num_mix_comp",
                                  num_mix_comp);
      current_statement__ = 202;
      validate_non_negative_index("mix_idx_beta", "num_comp", num_comp);
      current_statement__ = 203;
      mix_idx_beta = std::vector<std::vector<int>>(num_mix_comp, std::vector<int>(num_comp, std::numeric_limits<int>::min()));
      
      current_statement__ = 204;
      validate_non_negative_index("mix_idx_eta", "num_mix_comp", num_mix_comp);
      current_statement__ = 205;
      validate_non_negative_index("mix_idx_eta", "num_inter", num_inter);
      current_statement__ = 206;
      mix_idx_eta = std::vector<std::vector<int>>(num_mix_comp, std::vector<int>(num_inter, std::numeric_limits<int>::min()));
      
      current_statement__ = 207;
      validate_non_negative_index("num_obs_group", "num_groups", num_groups);
      current_statement__ = 208;
      num_obs_group = std::vector<int>(num_groups, std::numeric_limits<int>::min());
      
      current_statement__ = 208;
      assign(num_obs_group, nil_index_list(),
        count_elems(group, seq_int(1, num_groups, pstream__), pstream__),
        "assigning variable num_obs_group");
      current_statement__ = 209;
      validate_non_negative_index("num_cases_group", "num_groups", num_groups);
      current_statement__ = 210;
      num_cases_group = std::vector<int>(num_groups, std::numeric_limits<int>::min());
      
      current_statement__ = 210;
      assign(num_cases_group, nil_index_list(), rep_array(0, num_groups),
        "assigning variable num_cases_group");
      current_statement__ = 211;
      validate_non_negative_index("group_obs_idx", "num_groups", num_groups);
      current_statement__ = 212;
      validate_non_negative_index("group_obs_idx", "max(num_obs_group)",
                                  max(num_obs_group));
      current_statement__ = 213;
      group_obs_idx = std::vector<std::vector<int>>(num_groups, std::vector<int>(
        max(num_obs_group), std::numeric_limits<int>::min()));
      
      current_statement__ = 213;
      assign(group_obs_idx, nil_index_list(),
        rep_array(0, num_groups, max(num_obs_group)),
        "assigning variable group_obs_idx");
      current_statement__ = 214;
      validate_non_negative_index("mix_log_weight", "num_groups", num_groups);
      current_statement__ = 215;
      validate_non_negative_index("mix_log_weight", "num_mix_comp",
                                  num_mix_comp);
      current_statement__ = 216;
      mix_log_weight = std::vector<Eigen::Matrix<double, -1, 1>>(num_groups, Eigen::Matrix<double, -1, 1>(num_mix_comp));
      stan::math::fill(mix_log_weight, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 225;
      for (int g = 1; g <= num_groups; ++g) {
        int i;
        i = std::numeric_limits<int>::min();
        
        current_statement__ = 217;
        i = 1;
        current_statement__ = 223;
        for (int o = 1; o <= num_obs; ++o) {
          current_statement__ = 221;
          if (logical_eq(group[(o - 1)], g)) {
            current_statement__ = 218;
            assign(group_obs_idx,
              cons_list(index_uni(g),
                cons_list(index_uni(i), nil_index_list())), o,
              "assigning variable group_obs_idx");
            current_statement__ = 219;
            i = (i + 1);
          } }}
      current_statement__ = 232;
      for (int g = 1; g <= num_groups; ++g) {
        int group_size;
        group_size = std::numeric_limits<int>::min();
        
        current_statement__ = 226;
        group_size = num_obs_group[(g - 1)];
        current_statement__ = 227;
        validate_non_negative_index("obs_gidx", "group_size", group_size);
        std::vector<int> obs_gidx;
        obs_gidx = std::vector<int>(group_size, std::numeric_limits<int>::min());
        
        current_statement__ = 228;
        assign(obs_gidx, nil_index_list(),
          rvalue(group_obs_idx,
            cons_list(index_uni(g),
              cons_list(index_min_max(1, group_size), nil_index_list())),
            "group_obs_idx"), "assigning variable obs_gidx");
        current_statement__ = 230;
        if (logical_gt(
              cardinality_int(
                rvalue(stratum,
                  cons_list(index_multi(obs_gidx), nil_index_list()),
                  "stratum"), pstream__), 1)) {
          current_statement__ = 229;
          std::stringstream errmsg_stream__;
          errmsg_stream__ << "Group ";
          errmsg_stream__ << g;
          errmsg_stream__ << " is assigned to multiple strata.";
          throw std::domain_error(errmsg_stream__.str());
        } }
      current_statement__ = 236;
      for (int j = 1; j <= num_comp; ++j) {
        current_statement__ = 234;
        if ((primitive_value(
            logical_gt(
              cardinality_vector(
                rvalue(X_comp,
                  cons_list(index_uni(j),
                    cons_list(index_omni(),
                      cons_list(index_uni(1), nil_index_list()))), "X_comp"), pstream__),
              1)) || primitive_value(
            logical_neq(
              rvalue(X_comp,
                cons_list(index_uni(j),
                  cons_list(index_uni(1),
                    cons_list(index_uni(1), nil_index_list()))), "X_comp"),
              1.0)))) {
          current_statement__ = 233;
          std::stringstream errmsg_stream__;
          errmsg_stream__ << "Compound (";
          errmsg_stream__ << j;
          errmsg_stream__ << ") design matrix must have an intercept.";
          throw std::domain_error(errmsg_stream__.str());
        } }
      current_statement__ = 239;
      if (logical_gt(num_inter, 0)) {
        current_statement__ = 238;
        if ((primitive_value(
            logical_eq(
              cardinality_vector(
                rvalue(X_inter,
                  cons_list(index_omni(),
                    cons_list(index_uni(1), nil_index_list())), "X_inter"), pstream__),
              1)) && primitive_value(
            logical_eq(
              rvalue(X_inter,
                cons_list(index_uni(1),
                  cons_list(index_uni(1), nil_index_list())), "X_inter"),
              1.0)))) {
          current_statement__ = 237;
          if (pstream__) {
            stan_print(pstream__, "INFO: Interaction design matrix appears to have an intercept, which is unexpected.");
            stan_print(pstream__, "\n");
          }
        } 
      } 
      current_statement__ = 241;
      for (int i = 1; i <= num_obs; ++i) {
        current_statement__ = 240;
        assign(n, cons_list(index_uni(i), nil_index_list()),
          (r[(i - 1)] + nr[(i - 1)]), "assigning variable n");}
      current_statement__ = 247;
      for (int g = 1; g <= num_groups; ++g) {
        int group_size;
        group_size = std::numeric_limits<int>::min();
        
        current_statement__ = 242;
        group_size = num_obs_group[(g - 1)];
        current_statement__ = 243;
        validate_non_negative_index("obs_gidx", "group_size", group_size);
        std::vector<int> obs_gidx;
        obs_gidx = std::vector<int>(group_size, std::numeric_limits<int>::min());
        
        current_statement__ = 244;
        assign(obs_gidx, nil_index_list(),
          rvalue(group_obs_idx,
            cons_list(index_uni(g),
              cons_list(index_min_max(1, group_size), nil_index_list())),
            "group_obs_idx"), "assigning variable obs_gidx");
        current_statement__ = 245;
        assign(num_cases_group, cons_list(index_uni(g), nil_index_list()),
          sum(
            rvalue(n, cons_list(index_multi(obs_gidx), nil_index_list()),
              "n")), "assigning variable num_cases_group");}
      {
        current_statement__ = 248;
        validate_non_negative_index("finite_cov_sum", "num_obs", num_obs);
        std::vector<int> finite_cov_sum;
        finite_cov_sum = std::vector<int>(num_obs, std::numeric_limits<int>::min());
        
        current_statement__ = 249;
        assign(finite_cov_sum, nil_index_list(), rep_array(0, num_obs),
          "assigning variable finite_cov_sum");
        current_statement__ = 255;
        for (int j = 1; j <= num_comp; ++j) {
          current_statement__ = 253;
          for (int i = 1; i <= num_obs; ++i) {
            current_statement__ = 250;
            assign(finite_cov,
              cons_list(index_uni(j),
                cons_list(index_uni(i), nil_index_list())),
              ((primitive_value(
                 logical_negation(
                   is_inf(
                     rvalue(X_comp,
                       cons_list(index_uni(j),
                         cons_list(index_uni(i),
                           cons_list(index_uni(1), nil_index_list()))),
                       "X_comp")))) && primitive_value(
                 logical_negation(
                   is_inf(
                     rvalue(X_comp,
                       cons_list(index_uni(j),
                         cons_list(index_uni(i),
                           cons_list(index_uni(2), nil_index_list()))),
                       "X_comp"))))) ? 1 : 0),
              "assigning variable finite_cov");
            current_statement__ = 251;
            assign(finite_cov_sum, cons_list(index_uni(i), nil_index_list()),
              (finite_cov_sum[(i - 1)] + finite_cov[(j - 1)][(i - 1)]),
              "assigning variable finite_cov_sum");}}
        current_statement__ = 259;
        for (int i = 1; i <= num_obs; ++i) {
          current_statement__ = 257;
          if (logical_eq(finite_cov_sum[(i - 1)], 0)) {
            current_statement__ = 256;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "No finite covariates for observation ";
            errmsg_stream__ << i;
            throw std::domain_error(errmsg_stream__.str());
          } }
      }
      current_statement__ = 261;
      if (pstream__) {
        stan_print(pstream__, "Number of groups: ");
        stan_print(pstream__, num_groups);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 262;
      if (pstream__) {
        stan_print(pstream__, "Number of strata: ");
        stan_print(pstream__, num_strata);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 263;
      if (pstream__) {
        stan_print(pstream__, "EXNEX enabled for compounds ");
        stan_print(pstream__, num_EXNEX_comp);
        stan_print(pstream__, "/");
        stan_print(pstream__, num_comp);
        stan_print(pstream__, ":    ");
        stan_print(pstream__, prior_is_EXNEX_comp);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 264;
      if (pstream__) {
        stan_print(pstream__, "EXNEX enabled for interactions ");
        stan_print(pstream__, num_EXNEX_inter);
        stan_print(pstream__, "/");
        stan_print(pstream__, num_inter);
        stan_print(pstream__, ": ");
        stan_print(pstream__, prior_is_EXNEX_inter);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 265;
      if (pstream__) {
        stan_print(pstream__, "EXNEX mixture dimensionality ");
        stan_print(pstream__, num_mix_dim);
        stan_print(pstream__, " leads to ");
        stan_print(pstream__, num_mix_comp);
        stan_print(pstream__, " combinations.");
        stan_print(pstream__, "\n");
      }
      current_statement__ = 266;
      if (pstream__) {
        stan_print(pstream__, "Observation => group assignment:");
        stan_print(pstream__, "\n");
      }
      current_statement__ = 269;
      for (int g = 1; g <= num_groups; ++g) {
        current_statement__ = 267;
        if (pstream__) {
          stan_print(pstream__, "Group ");
          stan_print(pstream__, g);
          stan_print(pstream__, ": ");
          stan_print(pstream__, rvalue(group_obs_idx,
                                  cons_list(index_uni(g),
                                    cons_list(
                                      index_min_max(1, num_obs_group[
                                      (g - 1)]), nil_index_list())),
                                  "group_obs_idx"));
          stan_print(pstream__, "\n");
        }}
      current_statement__ = 270;
      if (pstream__) {
        stan_print(pstream__, "");
        stan_print(pstream__, "\n");
      }
      current_statement__ = 271;
      if (pstream__) {
        stan_print(pstream__, "Group => stratum assignment:");
        stan_print(pstream__, "\n");
      }
      current_statement__ = 274;
      for (int g = 1; g <= num_groups; ++g) {
        current_statement__ = 272;
        if (pstream__) {
          stan_print(pstream__, g);
          stan_print(pstream__, " => ");
          stan_print(pstream__, group_stratum_cid[(g - 1)]);
          stan_print(pstream__, "\n");
        }}
      current_statement__ = 275;
      if (pstream__) {
        stan_print(pstream__, "Prior distribution on tau parameters:");
        stan_print(pstream__, "\n");
      }
      current_statement__ = 284;
      if (logical_eq(prior_tau_dist, 0)) {
        current_statement__ = 282;
        if (pstream__) {
          stan_print(pstream__, "Fixed");
          stan_print(pstream__, "\n");
        }
      } else {
        current_statement__ = 281;
        if (logical_eq(prior_tau_dist, 1)) {
          current_statement__ = 279;
          if (pstream__) {
            stan_print(pstream__, "Log-Normal");
            stan_print(pstream__, "\n");
          }
        } else {
          current_statement__ = 278;
          if (logical_eq(prior_tau_dist, 2)) {
            current_statement__ = 276;
            if (pstream__) {
              stan_print(pstream__, "Truncated Normal");
              stan_print(pstream__, "\n");
            }
          } 
        }
      }
      current_statement__ = 286;
      if (prior_PD) {
        current_statement__ = 285;
        if (pstream__) {
          stan_print(pstream__, "Info: Sampling from prior predictive distribution.");
          stan_print(pstream__, "\n");
        }
      } 
      current_statement__ = 288;
      for (int g = 1; g <= num_groups; ++g) {
        current_statement__ = 287;
        assign(mix_log_weight, cons_list(index_uni(g), nil_index_list()),
          rep_vector(0.0, num_mix_comp), "assigning variable mix_log_weight");
      }
      current_statement__ = 327;
      for (int i = 1; i <= num_mix_comp; ++i) {
        current_statement__ = 289;
        validate_non_negative_index("mix_ind_base", "num_mix_dim",
                                    num_mix_dim);
        std::vector<int> mix_ind_base;
        mix_ind_base = std::vector<int>(num_mix_dim, std::numeric_limits<int>::min());
        
        current_statement__ = 290;
        assign(mix_ind_base, nil_index_list(),
          decimal2base((i - 1), num_mix_dim, 2, pstream__),
          "assigning variable mix_ind_base");
        current_statement__ = 291;
        validate_non_negative_index("mix_ind", "num_comp + num_inter",
                                    (num_comp + num_inter));
        std::vector<int> mix_ind;
        mix_ind = std::vector<int>((num_comp + num_inter), std::numeric_limits<int>::min());
        
        current_statement__ = 295;
        for (int j = 1; j <= num_mix_dim; ++j) {
          current_statement__ = 293;
          assign(mix_ind_base, cons_list(index_uni(j), nil_index_list()),
            (mix_ind_base[(j - 1)] + 1), "assigning variable mix_ind_base");}
        {
          int k;
          k = std::numeric_limits<int>::min();
          
          current_statement__ = 296;
          k = 1;
          current_statement__ = 304;
          for (int j = 1; j <= num_comp; ++j) {
            current_statement__ = 302;
            if (prior_is_EXNEX_comp[(j - 1)]) {
              current_statement__ = 299;
              assign(mix_ind, cons_list(index_uni(j), nil_index_list()),
                mix_ind_base[(k - 1)], "assigning variable mix_ind");
              current_statement__ = 300;
              k = (k + 1);
            } else {
              current_statement__ = 297;
              assign(mix_ind, cons_list(index_uni(j), nil_index_list()), 1,
                "assigning variable mix_ind");
            }}
        }
        {
          int k;
          k = std::numeric_limits<int>::min();
          
          current_statement__ = 306;
          k = 1;
          current_statement__ = 314;
          for (int j = 1; j <= num_inter; ++j) {
            current_statement__ = 312;
            if (prior_is_EXNEX_inter[(j - 1)]) {
              current_statement__ = 309;
              assign(mix_ind,
                cons_list(index_uni((num_comp + j)), nil_index_list()),
                mix_ind_base[((num_EXNEX_comp + k) - 1)],
                "assigning variable mix_ind");
              current_statement__ = 310;
              k = (k + 1);
            } else {
              current_statement__ = 307;
              assign(mix_ind,
                cons_list(index_uni((num_comp + j)), nil_index_list()), 1,
                "assigning variable mix_ind");
            }}
        }
        current_statement__ = 325;
        for (int g = 1; g <= num_groups; ++g) {
          current_statement__ = 318;
          for (int j = 1; j <= num_comp; ++j) {
            current_statement__ = 317;
            if (prior_is_EXNEX_comp[(j - 1)]) {
              current_statement__ = 316;
              assign(mix_log_weight,
                cons_list(index_uni(g),
                  cons_list(index_uni(i), nil_index_list())),
                (mix_log_weight[(g - 1)][(i - 1)] +
                  (logical_eq(mix_ind[(j - 1)], 1) ?
                     stan::math::log(
                       rvalue(prior_EX_prob_comp,
                         cons_list(index_uni(g),
                           cons_list(index_uni(j), nil_index_list())),
                         "prior_EX_prob_comp")) :
                     log1m(
                       rvalue(prior_EX_prob_comp,
                         cons_list(index_uni(g),
                           cons_list(index_uni(j), nil_index_list())),
                         "prior_EX_prob_comp")))),
                "assigning variable mix_log_weight");
            } }
          current_statement__ = 321;
          for (int j = 1; j <= num_inter; ++j) {
            current_statement__ = 320;
            if (prior_is_EXNEX_inter[(j - 1)]) {
              current_statement__ = 319;
              assign(mix_log_weight,
                cons_list(index_uni(g),
                  cons_list(index_uni(i), nil_index_list())),
                (mix_log_weight[(g - 1)][(i - 1)] +
                  (logical_eq(mix_ind[((num_comp + j) - 1)], 1) ?
                     stan::math::log(
                       rvalue(prior_EX_prob_inter,
                         cons_list(index_uni(g),
                           cons_list(index_uni(j), nil_index_list())),
                         "prior_EX_prob_inter")) :
                     log1m(
                       rvalue(prior_EX_prob_inter,
                         cons_list(index_uni(g),
                           cons_list(index_uni(j), nil_index_list())),
                         "prior_EX_prob_inter")))),
                "assigning variable mix_log_weight");
            } }
          current_statement__ = 322;
          assign(mix_idx_beta, cons_list(index_uni(i), nil_index_list()),
            rvalue(mix_ind,
              cons_list(index_min_max(1, num_comp), nil_index_list()),
              "mix_ind"), "assigning variable mix_idx_beta");
          current_statement__ = 323;
          assign(mix_idx_eta, cons_list(index_uni(i), nil_index_list()),
            rvalue(mix_ind,
              cons_list(
                index_min_max((num_comp + 1), (num_comp + num_inter)),
                nil_index_list()), "mix_ind"),
            "assigning variable mix_idx_eta");}}
      {
        int i;
        i = std::numeric_limits<int>::min();
        
        current_statement__ = 328;
        i = 1;
        current_statement__ = 334;
        for (int j = 1; j <= num_comp; ++j) {
          current_statement__ = 332;
          if (prior_is_EXNEX_comp[(j - 1)]) {
            current_statement__ = 329;
            assign(mix_is_EX_beta, cons_list(index_uni(i), nil_index_list()),
              which_elem(
                rvalue(mix_idx_beta,
                  cons_list(index_omni(),
                    cons_list(index_uni(j), nil_index_list())),
                  "mix_idx_beta"), 1, pstream__),
              "assigning variable mix_is_EX_beta");
            current_statement__ = 330;
            i = (i + 1);
          } }
      }
      {
        int i;
        i = std::numeric_limits<int>::min();
        
        current_statement__ = 336;
        i = 1;
        current_statement__ = 342;
        for (int j = 1; j <= num_inter; ++j) {
          current_statement__ = 340;
          if (prior_is_EXNEX_inter[(j - 1)]) {
            current_statement__ = 337;
            assign(mix_is_EX_eta, cons_list(index_uni(i), nil_index_list()),
              which_elem(
                rvalue(mix_idx_eta,
                  cons_list(index_omni(),
                    cons_list(index_uni(j), nil_index_list())),
                  "mix_idx_eta"), 1, pstream__),
              "assigning variable mix_is_EX_eta");
            current_statement__ = 338;
            i = (i + 1);
          } }
      }
      current_statement__ = 187;
      for (int sym1__ = 1; sym1__ <= num_obs; ++sym1__) {
        current_statement__ = 187;
        current_statement__ = 187;
        check_greater_or_equal(function__, "n[sym1__]", n[(sym1__ - 1)], 0);}
      current_statement__ = 190;
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        current_statement__ = 190;
        for (int sym2__ = 1; sym2__ <= num_obs; ++sym2__) {
          current_statement__ = 190;
          current_statement__ = 190;
          check_greater_or_equal(function__, "finite_cov[sym1__, sym2__]",
                                 finite_cov[(sym1__ - 1)][(sym2__ - 1)], 0);}
      }
      current_statement__ = 190;
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        current_statement__ = 190;
        for (int sym2__ = 1; sym2__ <= num_obs; ++sym2__) {
          current_statement__ = 190;
          current_statement__ = 190;
          check_less_or_equal(function__, "finite_cov[sym1__, sym2__]",
                              finite_cov[(sym1__ - 1)][(sym2__ - 1)], 1);}}
      current_statement__ = 191;
      current_statement__ = 191;
      check_greater_or_equal(function__, "num_EXNEX_comp", num_EXNEX_comp, 0);
      current_statement__ = 191;
      current_statement__ = 191;
      check_less_or_equal(function__, "num_EXNEX_comp", num_EXNEX_comp,
                          num_comp);
      current_statement__ = 192;
      current_statement__ = 192;
      check_greater_or_equal(function__, "num_EXNEX_inter", num_EXNEX_inter,
                             0);
      current_statement__ = 192;
      current_statement__ = 192;
      check_less_or_equal(function__, "num_EXNEX_inter", num_EXNEX_inter,
                          num_inter);
      current_statement__ = 193;
      current_statement__ = 193;
      check_greater_or_equal(function__, "num_mix_dim", num_mix_dim, 0);
      current_statement__ = 194;
      current_statement__ = 194;
      check_greater_or_equal(function__, "num_mix_comp", num_mix_comp, 0);
      current_statement__ = 197;
      for (int sym1__ = 1; sym1__ <= num_EXNEX_comp; ++sym1__) {
        current_statement__ = 197;
        for (int sym2__ = 1;
             sym2__ <= (logical_eq(num_mix_dim, 0) ? 0 :
                          power_int(2, (num_mix_dim - 1), pstream__));
             ++sym2__) {
          current_statement__ = 197;
          current_statement__ = 197;
          check_greater_or_equal(function__,
                                 "mix_is_EX_beta[sym1__, sym2__]",
                                 mix_is_EX_beta[(sym1__ - 1)][(sym2__ - 1)],
                                 1);}}
      current_statement__ = 197;
      for (int sym1__ = 1; sym1__ <= num_EXNEX_comp; ++sym1__) {
        current_statement__ = 197;
        for (int sym2__ = 1;
             sym2__ <= (logical_eq(num_mix_dim, 0) ? 0 :
                          power_int(2, (num_mix_dim - 1), pstream__));
             ++sym2__) {
          current_statement__ = 197;
          current_statement__ = 197;
          check_less_or_equal(function__, "mix_is_EX_beta[sym1__, sym2__]",
                              mix_is_EX_beta[(sym1__ - 1)][(sym2__ - 1)],
                              num_mix_comp);}}
      current_statement__ = 200;
      for (int sym1__ = 1; sym1__ <= num_EXNEX_inter; ++sym1__) {
        current_statement__ = 200;
        for (int sym2__ = 1;
             sym2__ <= (logical_eq(num_mix_dim, 0) ? 0 :
                          power_int(2, (num_mix_dim - 1), pstream__));
             ++sym2__) {
          current_statement__ = 200;
          current_statement__ = 200;
          check_greater_or_equal(function__, "mix_is_EX_eta[sym1__, sym2__]",
                                 mix_is_EX_eta[(sym1__ - 1)][(sym2__ - 1)], 1);
        }}
      current_statement__ = 200;
      for (int sym1__ = 1; sym1__ <= num_EXNEX_inter; ++sym1__) {
        current_statement__ = 200;
        for (int sym2__ = 1;
             sym2__ <= (logical_eq(num_mix_dim, 0) ? 0 :
                          power_int(2, (num_mix_dim - 1), pstream__));
             ++sym2__) {
          current_statement__ = 200;
          current_statement__ = 200;
          check_less_or_equal(function__, "mix_is_EX_eta[sym1__, sym2__]",
                              mix_is_EX_eta[(sym1__ - 1)][(sym2__ - 1)],
                              num_mix_comp);}}
      current_statement__ = 203;
      for (int sym1__ = 1; sym1__ <= num_mix_comp; ++sym1__) {
        current_statement__ = 203;
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          current_statement__ = 203;
          current_statement__ = 203;
          check_greater_or_equal(function__, "mix_idx_beta[sym1__, sym2__]",
                                 mix_idx_beta[(sym1__ - 1)][(sym2__ - 1)], 1);
        }}
      current_statement__ = 203;
      for (int sym1__ = 1; sym1__ <= num_mix_comp; ++sym1__) {
        current_statement__ = 203;
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          current_statement__ = 203;
          current_statement__ = 203;
          check_less_or_equal(function__, "mix_idx_beta[sym1__, sym2__]",
                              mix_idx_beta[(sym1__ - 1)][(sym2__ - 1)], 2);}}
      current_statement__ = 206;
      for (int sym1__ = 1; sym1__ <= num_mix_comp; ++sym1__) {
        current_statement__ = 206;
        for (int sym2__ = 1; sym2__ <= num_inter; ++sym2__) {
          current_statement__ = 206;
          current_statement__ = 206;
          check_greater_or_equal(function__, "mix_idx_eta[sym1__, sym2__]",
                                 mix_idx_eta[(sym1__ - 1)][(sym2__ - 1)], 1);
        }}
      current_statement__ = 206;
      for (int sym1__ = 1; sym1__ <= num_mix_comp; ++sym1__) {
        current_statement__ = 206;
        for (int sym2__ = 1; sym2__ <= num_inter; ++sym2__) {
          current_statement__ = 206;
          current_statement__ = 206;
          check_less_or_equal(function__, "mix_idx_eta[sym1__, sym2__]",
                              mix_idx_eta[(sym1__ - 1)][(sym2__ - 1)], 2);}}
      current_statement__ = 208;
      for (int sym1__ = 1; sym1__ <= num_groups; ++sym1__) {
        current_statement__ = 208;
        current_statement__ = 208;
        check_greater_or_equal(function__, "num_obs_group[sym1__]",
                               num_obs_group[(sym1__ - 1)], 0);}
      current_statement__ = 208;
      for (int sym1__ = 1; sym1__ <= num_groups; ++sym1__) {
        current_statement__ = 208;
        current_statement__ = 208;
        check_less_or_equal(function__, "num_obs_group[sym1__]",
                            num_obs_group[(sym1__ - 1)], num_obs);}
      current_statement__ = 210;
      for (int sym1__ = 1; sym1__ <= num_groups; ++sym1__) {
        current_statement__ = 210;
        current_statement__ = 210;
        check_greater_or_equal(function__, "num_cases_group[sym1__]",
                               num_cases_group[(sym1__ - 1)], 0);}
      current_statement__ = 213;
      for (int sym1__ = 1; sym1__ <= num_groups; ++sym1__) {
        current_statement__ = 213;
        for (int sym2__ = 1; sym2__ <= max(num_obs_group); ++sym2__) {
          current_statement__ = 213;
          current_statement__ = 213;
          check_greater_or_equal(function__, "group_obs_idx[sym1__, sym2__]",
                                 group_obs_idx[(sym1__ - 1)][(sym2__ - 1)], 0);
        }}
      current_statement__ = 213;
      for (int sym1__ = 1; sym1__ <= num_groups; ++sym1__) {
        current_statement__ = 213;
        for (int sym2__ = 1; sym2__ <= max(num_obs_group); ++sym2__) {
          current_statement__ = 213;
          current_statement__ = 213;
          check_less_or_equal(function__, "group_obs_idx[sym1__, sym2__]",
                              group_obs_idx[(sym1__ - 1)][(sym2__ - 1)],
                              num_obs);}}
      current_statement__ = 216;
      for (int sym1__ = 1; sym1__ <= num_groups; ++sym1__) {
        current_statement__ = 216;
        for (int sym2__ = 1; sym2__ <= num_mix_comp; ++sym2__) {
          current_statement__ = 216;
          current_statement__ = 216;
          check_less_or_equal(function__, "mix_log_weight[sym1__, sym2__]",
                              mix_log_weight[(sym1__ - 1)][(sym2__ - 1)], 0);
        }}
      current_statement__ = 344;
      log_beta_raw_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 344;
      log_beta_raw_1dim__ = (2 * num_groups);
      current_statement__ = 344;
      validate_non_negative_index("log_beta_raw", "2 * num_groups",
                                  log_beta_raw_1dim__);
      current_statement__ = 345;
      validate_non_negative_index("log_beta_raw", "num_comp", num_comp);
      current_statement__ = 346;
      eta_raw_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 346;
      eta_raw_1dim__ = (2 * num_groups);
      current_statement__ = 346;
      validate_non_negative_index("eta_raw", "2 * num_groups", eta_raw_1dim__);
      current_statement__ = 347;
      validate_non_negative_index("eta_raw", "num_inter", num_inter);
      current_statement__ = 348;
      validate_non_negative_index("mu_log_beta", "num_comp", num_comp);
      current_statement__ = 349;
      validate_non_negative_index("tau_log_beta_raw", "num_strata",
                                  num_strata);
      current_statement__ = 350;
      validate_non_negative_index("tau_log_beta_raw", "num_comp", num_comp);
      current_statement__ = 351;
      validate_non_negative_index("L_corr_log_beta", "num_comp", num_comp);
      current_statement__ = 352;
      validate_non_negative_index("mu_eta", "num_inter", num_inter);
      current_statement__ = 353;
      validate_non_negative_index("tau_eta_raw", "num_strata", num_strata);
      current_statement__ = 354;
      validate_non_negative_index("tau_eta_raw", "num_inter", num_inter);
      current_statement__ = 355;
      validate_non_negative_index("L_corr_eta", "num_inter", num_inter);
      current_statement__ = 355;
      validate_non_negative_index("L_corr_eta", "num_inter", num_inter);
      current_statement__ = 356;
      beta_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 356;
      beta_1dim__ = (2 * num_groups);
      current_statement__ = 356;
      validate_non_negative_index("beta", "2 * num_groups", beta_1dim__);
      current_statement__ = 357;
      validate_non_negative_index("beta", "num_comp", num_comp);
      current_statement__ = 358;
      eta_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 358;
      eta_1dim__ = (2 * num_groups);
      current_statement__ = 358;
      validate_non_negative_index("eta", "2 * num_groups", eta_1dim__);
      current_statement__ = 359;
      validate_non_negative_index("eta", "num_inter", num_inter);
      current_statement__ = 360;
      validate_non_negative_index("tau_log_beta", "num_strata", num_strata);
      current_statement__ = 361;
      validate_non_negative_index("tau_log_beta", "num_comp", num_comp);
      current_statement__ = 362;
      validate_non_negative_index("tau_eta", "num_strata", num_strata);
      current_statement__ = 363;
      validate_non_negative_index("tau_eta", "num_inter", num_inter);
      current_statement__ = 364;
      validate_non_negative_index("beta_EX_prob", "num_groups", num_groups);
      current_statement__ = 365;
      validate_non_negative_index("beta_EX_prob", "num_comp", num_comp);
      current_statement__ = 366;
      validate_non_negative_index("eta_EX_prob", "num_groups", num_groups);
      current_statement__ = 367;
      validate_non_negative_index("eta_EX_prob", "num_inter", num_inter);
      current_statement__ = 368;
      validate_non_negative_index("beta_group", "num_groups", num_groups);
      current_statement__ = 369;
      validate_non_negative_index("beta_group", "num_comp", num_comp);
      current_statement__ = 370;
      validate_non_negative_index("eta_group", "num_groups", num_groups);
      current_statement__ = 371;
      validate_non_negative_index("eta_group", "num_inter", num_inter);
      current_statement__ = 372;
      validate_non_negative_index("log_lik_group", "num_groups", num_groups);
      current_statement__ = 373;
      validate_non_negative_index("rho_log_beta", "num_comp", num_comp);
      current_statement__ = 374;
      validate_non_negative_index("Sigma_corr_eta", "num_inter", num_inter);
      current_statement__ = 375;
      validate_non_negative_index("Sigma_corr_eta", "num_inter", num_inter);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += log_beta_raw_1dim__ * num_comp * 2;
      num_params_r__ += eta_raw_1dim__ * num_inter;
      num_params_r__ += num_comp * 2;
      num_params_r__ += num_strata * num_comp * 2;
      num_params_r__ += num_comp * ((2 * (2 - 1)) / 2);
      num_params_r__ += num_inter;
      num_params_r__ += num_strata * num_inter;
      num_params_r__ += ((num_inter * (num_inter - 1)) / 2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  inline T__ log_prob(std::vector<T__>& params_r__,
                      std::vector<int>& params_i__,
                      std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "blrm_exnex_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> log_beta_raw;
      log_beta_raw = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(log_beta_raw_1dim__, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(num_comp, Eigen::Matrix<local_scalar_t__, -1, 1>(2)));
      stan::math::fill(log_beta_raw, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= log_beta_raw_1dim__; ++sym1__) {
        current_statement__ = 1;
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          current_statement__ = 1;
          assign(log_beta_raw,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            in__.vector(2), "assigning variable log_beta_raw");}}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> eta_raw;
      eta_raw = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(eta_raw_1dim__, Eigen::Matrix<local_scalar_t__, -1, 1>(num_inter));
      stan::math::fill(eta_raw, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= eta_raw_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(eta_raw, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(num_inter), "assigning variable eta_raw");}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> mu_log_beta;
      mu_log_beta = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(num_comp, Eigen::Matrix<local_scalar_t__, -1, 1>(2));
      stan::math::fill(mu_log_beta, DUMMY_VAR__);
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        current_statement__ = 3;
        assign(mu_log_beta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(2), "assigning variable mu_log_beta");}
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> tau_log_beta_raw;
      tau_log_beta_raw = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(num_strata, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(num_comp, Eigen::Matrix<local_scalar_t__, -1, 1>(2)));
      stan::math::fill(tau_log_beta_raw, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          current_statement__ = 4;
          assign(tau_log_beta_raw,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            in__.vector(2), "assigning variable tau_log_beta_raw");}}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          current_statement__ = 4;
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            current_statement__ = 4;
            if (jacobian__) {
              current_statement__ = 4;
              assign(tau_log_beta_raw,
                cons_list(index_uni(sym1__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym3__), nil_index_list()))),
                stan::math::lb_constrain(
                  tau_log_beta_raw[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)],
                  0, lp__), "assigning variable tau_log_beta_raw");
            } else {
              current_statement__ = 4;
              assign(tau_log_beta_raw,
                cons_list(index_uni(sym1__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym3__), nil_index_list()))),
                stan::math::lb_constrain(
                  tau_log_beta_raw[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)],
                  0), "assigning variable tau_log_beta_raw");
            }}}}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> L_corr_log_beta;
      L_corr_log_beta = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(num_comp, Eigen::Matrix<local_scalar_t__, -1, -1>(2, 2));
      stan::math::fill(L_corr_log_beta, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> L_corr_log_beta_in__;
      L_corr_log_beta_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(num_comp, Eigen::Matrix<local_scalar_t__, -1, 1>(
        ((2 * (2 - 1)) / 2)));
      stan::math::fill(L_corr_log_beta_in__, DUMMY_VAR__);
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        current_statement__ = 5;
        assign(L_corr_log_beta_in__,
          cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(((2 * (2 - 1)) / 2)),
          "assigning variable L_corr_log_beta_in__");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(L_corr_log_beta,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::cholesky_corr_constrain(
              L_corr_log_beta_in__[(sym1__ - 1)], 2, lp__),
            "assigning variable L_corr_log_beta");
        } else {
          current_statement__ = 5;
          assign(L_corr_log_beta,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::cholesky_corr_constrain(
              L_corr_log_beta_in__[(sym1__ - 1)], 2),
            "assigning variable L_corr_log_beta");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_eta;
      mu_eta = Eigen::Matrix<local_scalar_t__, -1, 1>(num_inter);
      stan::math::fill(mu_eta, DUMMY_VAR__);
      
      current_statement__ = 6;
      mu_eta = in__.vector(num_inter);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> tau_eta_raw;
      tau_eta_raw = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(num_strata, Eigen::Matrix<local_scalar_t__, -1, 1>(num_inter));
      stan::math::fill(tau_eta_raw, DUMMY_VAR__);
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        current_statement__ = 7;
        assign(tau_eta_raw, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(num_inter), "assigning variable tau_eta_raw");}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= num_inter; ++sym2__) {
          current_statement__ = 7;
          if (jacobian__) {
            current_statement__ = 7;
            assign(tau_eta_raw,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lb_constrain(
                tau_eta_raw[(sym1__ - 1)][(sym2__ - 1)], 0, lp__),
              "assigning variable tau_eta_raw");
          } else {
            current_statement__ = 7;
            assign(tau_eta_raw,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lb_constrain(
                tau_eta_raw[(sym1__ - 1)][(sym2__ - 1)], 0),
              "assigning variable tau_eta_raw");
          }}}
      Eigen::Matrix<local_scalar_t__, -1, -1> L_corr_eta;
      L_corr_eta = Eigen::Matrix<local_scalar_t__, -1, -1>(num_inter, num_inter);
      stan::math::fill(L_corr_eta, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_corr_eta_in__;
      L_corr_eta_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((num_inter *
                                                                  (num_inter
                                                                    - 1)) /
                                                                 2));
      stan::math::fill(L_corr_eta_in__, DUMMY_VAR__);
      
      current_statement__ = 8;
      L_corr_eta_in__ = in__.vector(((num_inter * (num_inter - 1)) / 2));
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        assign(L_corr_eta, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_corr_eta_in__, num_inter,
            lp__), "assigning variable L_corr_eta");
      } else {
        current_statement__ = 8;
        assign(L_corr_eta, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_corr_eta_in__, num_inter),
          "assigning variable L_corr_eta");
      }
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> beta;
      beta = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(beta_1dim__, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(num_comp, Eigen::Matrix<local_scalar_t__, -1, 1>(2)));
      stan::math::fill(beta, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> eta;
      eta = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(eta_1dim__, Eigen::Matrix<local_scalar_t__, -1, 1>(num_inter));
      stan::math::fill(eta, DUMMY_VAR__);
      
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> tau_log_beta;
      tau_log_beta = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(num_strata, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(num_comp, Eigen::Matrix<local_scalar_t__, -1, 1>(2)));
      stan::math::fill(tau_log_beta, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> tau_eta;
      tau_eta = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(num_strata, Eigen::Matrix<local_scalar_t__, -1, 1>(num_inter));
      stan::math::fill(tau_eta, DUMMY_VAR__);
      
      current_statement__ = 19;
      if (logical_eq(prior_tau_dist, 0)) {
        current_statement__ = 16;
        assign(tau_log_beta, nil_index_list(), prior_EX_tau_mean_comp,
          "assigning variable tau_log_beta");
        current_statement__ = 17;
        assign(tau_eta, nil_index_list(), prior_EX_tau_mean_inter,
          "assigning variable tau_eta");
      } else {
        current_statement__ = 13;
        assign(tau_log_beta, nil_index_list(), tau_log_beta_raw,
          "assigning variable tau_log_beta");
        current_statement__ = 14;
        assign(tau_eta, nil_index_list(), tau_eta_raw,
          "assigning variable tau_eta");
      }
      current_statement__ = 27;
      for (int g = 1; g <= num_groups; ++g) {
        int s;
        s = std::numeric_limits<int>::min();
        
        current_statement__ = 20;
        s = group_stratum_cid[(g - 1)];
        current_statement__ = 23;
        for (int j = 1; j <= num_comp; ++j) {
          current_statement__ = 21;
          assign(beta,
            cons_list(index_uni(g),
              cons_list(index_uni(j), nil_index_list())),
            add(mu_log_beta[(j - 1)],
              multiply(
                diag_pre_multiply(tau_log_beta[(s - 1)][(j - 1)],
                  L_corr_log_beta[(j - 1)]), log_beta_raw[(g - 1)][(j - 1)])),
            "assigning variable beta");}
        current_statement__ = 25;
        if (logical_gt(num_inter, 0)) {
          current_statement__ = 24;
          assign(eta, cons_list(index_uni(g), nil_index_list()),
            add(mu_eta,
              multiply(diag_pre_multiply(tau_eta[(s - 1)], L_corr_eta),
                eta_raw[(g - 1)])), "assigning variable eta");
        } }
      current_statement__ = 28;
      assign(beta,
        cons_list(index_min_max((num_groups + 1), (2 * num_groups)),
          nil_index_list()),
        rvalue(log_beta_raw,
          cons_list(index_min_max((num_groups + 1), (2 * num_groups)),
            nil_index_list()), "log_beta_raw"), "assigning variable beta");
      current_statement__ = 29;
      assign(eta,
        cons_list(index_min_max((num_groups + 1), (2 * num_groups)),
          nil_index_list()),
        rvalue(eta_raw,
          cons_list(index_min_max((num_groups + 1), (2 * num_groups)),
            nil_index_list()), "eta_raw"), "assigning variable eta");
      current_statement__ = 32;
      for (int g = 1; g <= (2 * num_groups); ++g) {
        current_statement__ = 31;
        for (int j = 1; j <= num_comp; ++j) {
          current_statement__ = 30;
          assign(beta,
            cons_list(index_uni(g),
              cons_list(index_uni(j),
                cons_list(index_uni(2), nil_index_list()))),
            stan::math::exp(beta[(g - 1)][(j - 1)][(2 - 1)]),
            "assigning variable beta");}}
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        current_statement__ = 11;
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          current_statement__ = 11;
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            current_statement__ = 11;
            current_statement__ = 11;
            check_greater_or_equal(function__,
                                   "tau_log_beta[sym1__, sym2__, sym3__]",
                                   tau_log_beta[(sym1__ - 1)][(sym2__ - 1)][
                                   (sym3__ - 1)], 0);}}}
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        current_statement__ = 12;
        for (int sym2__ = 1; sym2__ <= num_inter; ++sym2__) {
          current_statement__ = 12;
          current_statement__ = 12;
          check_greater_or_equal(function__, "tau_eta[sym1__, sym2__]",
                                 tau_eta[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      {
        local_scalar_t__ log_lik;
        log_lik = DUMMY_VAR__;
        
        current_statement__ = 83;
        log_lik = 0.0;
        current_statement__ = 94;
        for (int g = 1; g <= num_groups; ++g) {
          int s;
          s = std::numeric_limits<int>::min();
          
          current_statement__ = 84;
          s = group_stratum_cid[(g - 1)];
          int group_size;
          group_size = std::numeric_limits<int>::min();
          
          current_statement__ = 85;
          group_size = num_obs_group[(g - 1)];
          current_statement__ = 86;
          validate_non_negative_index("obs_gidx", "group_size", group_size);
          std::vector<int> obs_gidx;
          obs_gidx = std::vector<int>(group_size, std::numeric_limits<int>::min());
          
          current_statement__ = 87;
          assign(obs_gidx, nil_index_list(),
            rvalue(group_obs_idx,
              cons_list(index_uni(g),
                cons_list(index_min_max(1, group_size), nil_index_list())),
              "group_obs_idx"), "assigning variable obs_gidx");
          current_statement__ = 92;
          if (logical_neq(num_cases_group[(g - 1)], 0)) {
            current_statement__ = 88;
            validate_non_negative_index("mix_lpmf", "num_mix_comp",
                                        num_mix_comp);
            Eigen::Matrix<local_scalar_t__, -1, 1> mix_lpmf;
            mix_lpmf = Eigen::Matrix<local_scalar_t__, -1, 1>(num_mix_comp);
            stan::math::fill(mix_lpmf, DUMMY_VAR__);
            
            current_statement__ = 89;
            assign(mix_lpmf, nil_index_list(),
              add(
                blrm_mix_lpmf_comp(g, num_groups, obs_gidx, r, n, X_comp,
                  finite_cov, X_inter, beta, mix_idx_beta, eta,
                  mix_idx_eta, pstream__), mix_log_weight[(g - 1)]),
              "assigning variable mix_lpmf");
            current_statement__ = 90;
            log_lik = (log_lik + log_sum_exp(mix_lpmf));
          } }
        current_statement__ = 96;
        if (logical_negation(prior_PD)) {
          current_statement__ = 95;
          lp_accum__.add(log_lik);
        } 
        current_statement__ = 105;
        for (int j = 1; j <= num_comp; ++j) {
          current_statement__ = 97;
          lp_accum__.add(
            normal_lpdf<propto__>(mu_log_beta[(j - 1)][(1 - 1)],
              prior_EX_mu_mean_comp[(j - 1)][(1 - 1)],
              prior_EX_mu_sd_comp[(j - 1)][(1 - 1)]));
          current_statement__ = 98;
          lp_accum__.add(
            normal_lpdf<propto__>(mu_log_beta[(j - 1)][(2 - 1)],
              prior_EX_mu_mean_comp[(j - 1)][(2 - 1)],
              prior_EX_mu_sd_comp[(j - 1)][(2 - 1)]));
          current_statement__ = 102;
          for (int s = 1; s <= num_strata; ++s) {
            current_statement__ = 99;
            lp_accum__.add(
              tau_prior_lpdf<propto__>(
                tau_log_beta_raw[(s - 1)][(j - 1)][(1 - 1)], prior_tau_dist,
                prior_EX_tau_mean_comp[(s - 1)][(j - 1)][(1 - 1)],
                prior_EX_tau_sd_comp[(s - 1)][(j - 1)][(1 - 1)], pstream__));
            current_statement__ = 100;
            lp_accum__.add(
              tau_prior_lpdf<propto__>(
                tau_log_beta_raw[(s - 1)][(j - 1)][(2 - 1)], prior_tau_dist,
                prior_EX_tau_mean_comp[(s - 1)][(j - 1)][(2 - 1)],
                prior_EX_tau_sd_comp[(s - 1)][(j - 1)][(2 - 1)], pstream__));
          }
          current_statement__ = 103;
          lp_accum__.add(
            lkj_corr_cholesky_lpdf<propto__>(L_corr_log_beta[(j - 1)],
              prior_EX_corr_eta_comp[(j - 1)]));}
        current_statement__ = 106;
        lp_accum__.add(
          normal_lpdf<propto__>(mu_eta, prior_EX_mu_mean_inter,
            prior_EX_mu_sd_inter));
        current_statement__ = 109;
        for (int s = 1; s <= num_strata; ++s) {
          current_statement__ = 108;
          for (int j = 1; j <= num_inter; ++j) {
            current_statement__ = 107;
            lp_accum__.add(
              tau_prior_lpdf<propto__>(tau_eta_raw[(s - 1)][(j - 1)],
                prior_tau_dist, prior_EX_tau_mean_inter[(s - 1)][(j - 1)],
                prior_EX_tau_sd_inter[(s - 1)][(j - 1)], pstream__));}}
        current_statement__ = 110;
        lp_accum__.add(
          lkj_corr_cholesky_lpdf<propto__>(L_corr_eta,
            prior_EX_corr_eta_inter));
        current_statement__ = 115;
        for (int g = 1; g <= num_groups; ++g) {
          current_statement__ = 112;
          for (int j = 1; j <= num_comp; ++j) {
            current_statement__ = 111;
            lp_accum__.add(
              normal_lpdf<propto__>(log_beta_raw[(g - 1)][(j - 1)], 0, 1));}
          current_statement__ = 113;
          lp_accum__.add(normal_lpdf<propto__>(eta_raw[(g - 1)], 0, 1));}
        current_statement__ = 121;
        for (int g = (num_groups + 1); g <= (2 * num_groups); ++g) {
          current_statement__ = 118;
          for (int j = 1; j <= num_comp; ++j) {
            current_statement__ = 116;
            lp_accum__.add(
              normal_lpdf<propto__>(log_beta_raw[(g - 1)][(j - 1)],
                prior_NEX_mu_mean_comp[(j - 1)],
                prior_NEX_mu_sd_comp[(j - 1)]));}
          current_statement__ = 119;
          lp_accum__.add(
            normal_lpdf<propto__>(eta_raw[(g - 1)], prior_NEX_mu_mean_inter,
              prior_NEX_mu_sd_inter));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  inline void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                          std::vector<int>& params_i__,
                          std::vector<double>& vars__,
                          bool emit_transformed_parameters__ = true,
                          bool emit_generated_quantities__ = true,
                          std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "blrm_exnex_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> log_beta_raw;
      log_beta_raw = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(log_beta_raw_1dim__, std::vector<Eigen::Matrix<double, -1, 1>>(num_comp, Eigen::Matrix<double, -1, 1>(2)));
      stan::math::fill(log_beta_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= log_beta_raw_1dim__; ++sym1__) {
        current_statement__ = 1;
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          current_statement__ = 1;
          assign(log_beta_raw,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            in__.vector(2), "assigning variable log_beta_raw");}}
      std::vector<Eigen::Matrix<double, -1, 1>> eta_raw;
      eta_raw = std::vector<Eigen::Matrix<double, -1, 1>>(eta_raw_1dim__, Eigen::Matrix<double, -1, 1>(num_inter));
      stan::math::fill(eta_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= eta_raw_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(eta_raw, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(num_inter), "assigning variable eta_raw");}
      std::vector<Eigen::Matrix<double, -1, 1>> mu_log_beta;
      mu_log_beta = std::vector<Eigen::Matrix<double, -1, 1>>(num_comp, Eigen::Matrix<double, -1, 1>(2));
      stan::math::fill(mu_log_beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        current_statement__ = 3;
        assign(mu_log_beta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(2), "assigning variable mu_log_beta");}
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> tau_log_beta_raw;
      tau_log_beta_raw = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(num_strata, std::vector<Eigen::Matrix<double, -1, 1>>(num_comp, Eigen::Matrix<double, -1, 1>(2)));
      stan::math::fill(tau_log_beta_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          current_statement__ = 4;
          assign(tau_log_beta_raw,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            in__.vector(2), "assigning variable tau_log_beta_raw");}}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          current_statement__ = 4;
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            current_statement__ = 4;
            assign(tau_log_beta_raw,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym3__), nil_index_list()))),
              stan::math::lb_constrain(
                tau_log_beta_raw[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)], 0),
              "assigning variable tau_log_beta_raw");}}}
      std::vector<Eigen::Matrix<double, -1, -1>> L_corr_log_beta;
      L_corr_log_beta = std::vector<Eigen::Matrix<double, -1, -1>>(num_comp, Eigen::Matrix<double, -1, -1>(2, 2));
      stan::math::fill(L_corr_log_beta, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> L_corr_log_beta_in__;
      L_corr_log_beta_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(num_comp, Eigen::Matrix<local_scalar_t__, -1, 1>(
        ((2 * (2 - 1)) / 2)));
      stan::math::fill(L_corr_log_beta_in__, DUMMY_VAR__);
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        current_statement__ = 5;
        assign(L_corr_log_beta_in__,
          cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(((2 * (2 - 1)) / 2)),
          "assigning variable L_corr_log_beta_in__");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        current_statement__ = 5;
        assign(L_corr_log_beta,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::cholesky_corr_constrain(
            L_corr_log_beta_in__[(sym1__ - 1)], 2),
          "assigning variable L_corr_log_beta");}
      Eigen::Matrix<double, -1, 1> mu_eta;
      mu_eta = Eigen::Matrix<double, -1, 1>(num_inter);
      stan::math::fill(mu_eta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      mu_eta = in__.vector(num_inter);
      std::vector<Eigen::Matrix<double, -1, 1>> tau_eta_raw;
      tau_eta_raw = std::vector<Eigen::Matrix<double, -1, 1>>(num_strata, Eigen::Matrix<double, -1, 1>(num_inter));
      stan::math::fill(tau_eta_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        current_statement__ = 7;
        assign(tau_eta_raw, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(num_inter), "assigning variable tau_eta_raw");}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= num_inter; ++sym2__) {
          current_statement__ = 7;
          assign(tau_eta_raw,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lb_constrain(tau_eta_raw[(sym1__ - 1)][(sym2__ - 1)],
              0), "assigning variable tau_eta_raw");}}
      Eigen::Matrix<double, -1, -1> L_corr_eta;
      L_corr_eta = Eigen::Matrix<double, -1, -1>(num_inter, num_inter);
      stan::math::fill(L_corr_eta, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_corr_eta_in__;
      L_corr_eta_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((num_inter *
                                                                  (num_inter
                                                                    - 1)) /
                                                                 2));
      stan::math::fill(L_corr_eta_in__, DUMMY_VAR__);
      
      current_statement__ = 8;
      L_corr_eta_in__ = in__.vector(((num_inter * (num_inter - 1)) / 2));
      current_statement__ = 8;
      assign(L_corr_eta, nil_index_list(),
        stan::math::cholesky_corr_constrain(L_corr_eta_in__, num_inter),
        "assigning variable L_corr_eta");
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> beta;
      beta = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(beta_1dim__, std::vector<Eigen::Matrix<double, -1, 1>>(num_comp, Eigen::Matrix<double, -1, 1>(2)));
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> eta;
      eta = std::vector<Eigen::Matrix<double, -1, 1>>(eta_1dim__, Eigen::Matrix<double, -1, 1>(num_inter));
      stan::math::fill(eta, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> tau_log_beta;
      tau_log_beta = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(num_strata, std::vector<Eigen::Matrix<double, -1, 1>>(num_comp, Eigen::Matrix<double, -1, 1>(2)));
      stan::math::fill(tau_log_beta, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> tau_eta;
      tau_eta = std::vector<Eigen::Matrix<double, -1, 1>>(num_strata, Eigen::Matrix<double, -1, 1>(num_inter));
      stan::math::fill(tau_eta, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= log_beta_raw_1dim__; ++sym3__) {
            vars__.emplace_back(
              log_beta_raw[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);}}}
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= eta_raw_1dim__; ++sym2__) {
          vars__.emplace_back(eta_raw[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          vars__.emplace_back(mu_log_beta[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= num_strata; ++sym3__) {
            vars__.emplace_back(
              tau_log_beta_raw[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);}}}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= num_comp; ++sym3__) {
            vars__.emplace_back(
              rvalue(L_corr_log_beta,
                cons_list(index_uni(sym3__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list()))),
                "L_corr_log_beta"));}}}
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        vars__.emplace_back(mu_eta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_strata; ++sym2__) {
          vars__.emplace_back(tau_eta_raw[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_inter; ++sym2__) {
          vars__.emplace_back(
            rvalue(L_corr_eta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "L_corr_eta"));}}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 19;
      if (logical_eq(prior_tau_dist, 0)) {
        current_statement__ = 16;
        assign(tau_log_beta, nil_index_list(), prior_EX_tau_mean_comp,
          "assigning variable tau_log_beta");
        current_statement__ = 17;
        assign(tau_eta, nil_index_list(), prior_EX_tau_mean_inter,
          "assigning variable tau_eta");
      } else {
        current_statement__ = 13;
        assign(tau_log_beta, nil_index_list(), tau_log_beta_raw,
          "assigning variable tau_log_beta");
        current_statement__ = 14;
        assign(tau_eta, nil_index_list(), tau_eta_raw,
          "assigning variable tau_eta");
      }
      current_statement__ = 27;
      for (int g = 1; g <= num_groups; ++g) {
        int s;
        s = std::numeric_limits<int>::min();
        
        current_statement__ = 20;
        s = group_stratum_cid[(g - 1)];
        current_statement__ = 23;
        for (int j = 1; j <= num_comp; ++j) {
          current_statement__ = 21;
          assign(beta,
            cons_list(index_uni(g),
              cons_list(index_uni(j), nil_index_list())),
            add(mu_log_beta[(j - 1)],
              multiply(
                diag_pre_multiply(tau_log_beta[(s - 1)][(j - 1)],
                  L_corr_log_beta[(j - 1)]), log_beta_raw[(g - 1)][(j - 1)])),
            "assigning variable beta");}
        current_statement__ = 25;
        if (logical_gt(num_inter, 0)) {
          current_statement__ = 24;
          assign(eta, cons_list(index_uni(g), nil_index_list()),
            add(mu_eta,
              multiply(diag_pre_multiply(tau_eta[(s - 1)], L_corr_eta),
                eta_raw[(g - 1)])), "assigning variable eta");
        } }
      current_statement__ = 28;
      assign(beta,
        cons_list(index_min_max((num_groups + 1), (2 * num_groups)),
          nil_index_list()),
        rvalue(log_beta_raw,
          cons_list(index_min_max((num_groups + 1), (2 * num_groups)),
            nil_index_list()), "log_beta_raw"), "assigning variable beta");
      current_statement__ = 29;
      assign(eta,
        cons_list(index_min_max((num_groups + 1), (2 * num_groups)),
          nil_index_list()),
        rvalue(eta_raw,
          cons_list(index_min_max((num_groups + 1), (2 * num_groups)),
            nil_index_list()), "eta_raw"), "assigning variable eta");
      current_statement__ = 32;
      for (int g = 1; g <= (2 * num_groups); ++g) {
        current_statement__ = 31;
        for (int j = 1; j <= num_comp; ++j) {
          current_statement__ = 30;
          assign(beta,
            cons_list(index_uni(g),
              cons_list(index_uni(j),
                cons_list(index_uni(2), nil_index_list()))),
            stan::math::exp(beta[(g - 1)][(j - 1)][(2 - 1)]),
            "assigning variable beta");}}
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        current_statement__ = 11;
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          current_statement__ = 11;
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            current_statement__ = 11;
            current_statement__ = 11;
            check_greater_or_equal(function__,
                                   "tau_log_beta[sym1__, sym2__, sym3__]",
                                   tau_log_beta[(sym1__ - 1)][(sym2__ - 1)][
                                   (sym3__ - 1)], 0);}}}
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        current_statement__ = 12;
        for (int sym2__ = 1; sym2__ <= num_inter; ++sym2__) {
          current_statement__ = 12;
          current_statement__ = 12;
          check_greater_or_equal(function__, "tau_eta[sym1__, sym2__]",
                                 tau_eta[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= beta_1dim__; ++sym3__) {
              vars__.emplace_back(
                beta[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);}}}
        for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= eta_1dim__; ++sym2__) {
            vars__.emplace_back(eta[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= num_strata; ++sym3__) {
              vars__.emplace_back(
                tau_log_beta[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);}}}
        for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= num_strata; ++sym2__) {
            vars__.emplace_back(tau_eta[(sym2__ - 1)][(sym1__ - 1)]);}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, -1> beta_EX_prob;
      beta_EX_prob = Eigen::Matrix<double, -1, -1>(num_groups, num_comp);
      stan::math::fill(beta_EX_prob, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> eta_EX_prob;
      eta_EX_prob = Eigen::Matrix<double, -1, -1>(num_groups, num_inter);
      stan::math::fill(eta_EX_prob, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> beta_group;
      beta_group = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(num_groups, std::vector<Eigen::Matrix<double, -1, 1>>(num_comp, Eigen::Matrix<double, -1, 1>(2)));
      stan::math::fill(beta_group, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> eta_group;
      eta_group = std::vector<Eigen::Matrix<double, -1, 1>>(num_groups, Eigen::Matrix<double, -1, 1>(num_inter));
      stan::math::fill(eta_group, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_group;
      log_lik_group = Eigen::Matrix<double, -1, 1>(num_groups);
      stan::math::fill(log_lik_group, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> rho_log_beta;
      rho_log_beta = Eigen::Matrix<double, -1, 1>(num_comp);
      stan::math::fill(rho_log_beta, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Sigma_corr_eta;
      Sigma_corr_eta = Eigen::Matrix<double, -1, -1>(num_inter, num_inter);
      stan::math::fill(Sigma_corr_eta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 39;
      assign(Sigma_corr_eta, nil_index_list(),
        multiply_lower_tri_self_transpose(L_corr_eta),
        "assigning variable Sigma_corr_eta");
      current_statement__ = 43;
      for (int j = 1; j <= num_comp; ++j) {
        Eigen::Matrix<double, -1, -1> Sigma_corr_log_beta;
        Sigma_corr_log_beta = Eigen::Matrix<double, -1, -1>(2, 2);
        stan::math::fill(Sigma_corr_log_beta, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 40;
        assign(Sigma_corr_log_beta, nil_index_list(),
          multiply_lower_tri_self_transpose(L_corr_log_beta[(j - 1)]),
          "assigning variable Sigma_corr_log_beta");
        current_statement__ = 41;
        assign(rho_log_beta, cons_list(index_uni(j), nil_index_list()),
          rvalue(Sigma_corr_log_beta,
            cons_list(index_uni(2),
              cons_list(index_uni(1), nil_index_list())),
            "Sigma_corr_log_beta"), "assigning variable rho_log_beta");}
      current_statement__ = 82;
      for (int g = 1; g <= num_groups; ++g) {
        int s;
        s = std::numeric_limits<int>::min();
        
        current_statement__ = 44;
        s = group_stratum_cid[(g - 1)];
        int group_size;
        group_size = std::numeric_limits<int>::min();
        
        current_statement__ = 45;
        group_size = num_obs_group[(g - 1)];
        current_statement__ = 46;
        validate_non_negative_index("obs_gidx", "group_size", group_size);
        std::vector<int> obs_gidx;
        obs_gidx = std::vector<int>(group_size, std::numeric_limits<int>::min());
        
        current_statement__ = 47;
        assign(obs_gidx, nil_index_list(),
          rvalue(group_obs_idx,
            cons_list(index_uni(g),
              cons_list(index_min_max(1, group_size), nil_index_list())),
            "group_obs_idx"), "assigning variable obs_gidx");
        current_statement__ = 48;
        validate_non_negative_index("mix_lpmf", "num_mix_comp", num_mix_comp);
        Eigen::Matrix<double, -1, 1> mix_lpmf;
        mix_lpmf = Eigen::Matrix<double, -1, 1>(num_mix_comp);
        stan::math::fill(mix_lpmf, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 49;
        assign(mix_lpmf, nil_index_list(),
          add(
            blrm_mix_lpmf_comp(g, num_groups, obs_gidx, r, n, X_comp,
              finite_cov, X_inter, beta, mix_idx_beta, eta,
              mix_idx_eta, pstream__), mix_log_weight[(g - 1)]),
          "assigning variable mix_lpmf");
        double log_norm;
        log_norm = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 50;
        log_norm = log_sum_exp(mix_lpmf);
        current_statement__ = 51;
        validate_non_negative_index("log_EX_prob_mix", "num_mix_comp",
                                    num_mix_comp);
        Eigen::Matrix<double, -1, 1> log_EX_prob_mix;
        log_EX_prob_mix = Eigen::Matrix<double, -1, 1>(num_mix_comp);
        stan::math::fill(log_EX_prob_mix, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 52;
        assign(log_EX_prob_mix, nil_index_list(),
          subtract(mix_lpmf, log_norm), "assigning variable log_EX_prob_mix");
        int mix_config_ind;
        mix_config_ind = std::numeric_limits<int>::min();
        
        current_statement__ = 53;
        mix_config_ind = categorical_rng(stan::math::exp(log_EX_prob_mix),
                           base_rng__);
        current_statement__ = 54;
        validate_non_negative_index("mix_beta_config", "num_comp", num_comp);
        std::vector<int> mix_beta_config;
        mix_beta_config = std::vector<int>(num_comp, std::numeric_limits<int>::min());
        
        current_statement__ = 55;
        assign(mix_beta_config, nil_index_list(),
          mix_idx_beta[(mix_config_ind - 1)],
          "assigning variable mix_beta_config");
        current_statement__ = 56;
        validate_non_negative_index("mix_eta_config", "num_inter", num_inter);
        std::vector<int> mix_eta_config;
        mix_eta_config = std::vector<int>(num_inter, std::numeric_limits<int>::min());
        
        current_statement__ = 57;
        assign(mix_eta_config, nil_index_list(),
          mix_idx_eta[(mix_config_ind - 1)],
          "assigning variable mix_eta_config");
        current_statement__ = 58;
        assign(log_lik_group, cons_list(index_uni(g), nil_index_list()),
          log_norm, "assigning variable log_lik_group");
        {
          int i;
          i = std::numeric_limits<int>::min();
          
          current_statement__ = 59;
          i = 1;
          current_statement__ = 68;
          for (int j = 1; j <= num_comp; ++j) {
            current_statement__ = 65;
            if (prior_is_EXNEX_comp[(j - 1)]) {
              current_statement__ = 62;
              assign(beta_EX_prob,
                cons_list(index_uni(g),
                  cons_list(index_uni(j), nil_index_list())),
                stan::math::exp(
                  log_sum_exp(
                    rvalue(log_EX_prob_mix,
                      cons_list(index_multi(mix_is_EX_beta[(i - 1)]),
                        nil_index_list()), "log_EX_prob_mix"))),
                "assigning variable beta_EX_prob");
              current_statement__ = 63;
              i = (i + 1);
            } else {
              current_statement__ = 60;
              assign(beta_EX_prob,
                cons_list(index_uni(g),
                  cons_list(index_uni(j), nil_index_list())), 1.0,
                "assigning variable beta_EX_prob");
            }
            current_statement__ = 66;
            assign(beta_group,
              cons_list(index_uni(g),
                cons_list(index_uni(j), nil_index_list())),
              beta[((g +
                      (logical_eq(mix_beta_config[(j - 1)], 1) ? 0 :
                         num_groups)) - 1)][(j - 1)],
              "assigning variable beta_group");}
        }
        {
          int i;
          i = std::numeric_limits<int>::min();
          
          current_statement__ = 70;
          i = 1;
          current_statement__ = 79;
          for (int j = 1; j <= num_inter; ++j) {
            current_statement__ = 76;
            if (prior_is_EXNEX_inter[(j - 1)]) {
              current_statement__ = 73;
              assign(eta_EX_prob,
                cons_list(index_uni(g),
                  cons_list(index_uni(j), nil_index_list())),
                stan::math::exp(
                  log_sum_exp(
                    rvalue(log_EX_prob_mix,
                      cons_list(index_multi(mix_is_EX_eta[(i - 1)]),
                        nil_index_list()), "log_EX_prob_mix"))),
                "assigning variable eta_EX_prob");
              current_statement__ = 74;
              i = (i + 1);
            } else {
              current_statement__ = 71;
              assign(eta_EX_prob,
                cons_list(index_uni(g),
                  cons_list(index_uni(j), nil_index_list())), 1.0,
                "assigning variable eta_EX_prob");
            }
            current_statement__ = 77;
            assign(eta_group,
              cons_list(index_uni(g),
                cons_list(index_uni(j), nil_index_list())),
              eta[((g +
                     (logical_eq(mix_eta_config[(j - 1)], 1) ? 0 : num_groups))
                    - 1)][(j - 1)], "assigning variable eta_group");}
        }}
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_groups; ++sym2__) {
          vars__.emplace_back(
            rvalue(beta_EX_prob,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "beta_EX_prob"));}}
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_groups; ++sym2__) {
          vars__.emplace_back(
            rvalue(eta_EX_prob,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "eta_EX_prob"));}}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= num_groups; ++sym3__) {
            vars__.emplace_back(
              beta_group[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);}}}
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_groups; ++sym2__) {
          vars__.emplace_back(eta_group[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= num_groups; ++sym1__) {
        vars__.emplace_back(log_lik_group[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        vars__.emplace_back(rho_log_beta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_inter; ++sym2__) {
          vars__.emplace_back(
            rvalue(Sigma_corr_eta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "Sigma_corr_eta"));}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  inline void transform_inits(const stan::io::var_context& context__,
                              std::vector<int>& params_i__,
                              std::vector<double>& vars__,
                              std::ostream* pstream__) const
    final {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> log_beta_raw;
      log_beta_raw = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(log_beta_raw_1dim__, std::vector<Eigen::Matrix<double, -1, 1>>(num_comp, Eigen::Matrix<double, -1, 1>(2)));
      stan::math::fill(log_beta_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> log_beta_raw_flat__;
        current_statement__ = 1;
        assign(log_beta_raw_flat__, nil_index_list(),
          context__.vals_r("log_beta_raw"),
          "assigning variable log_beta_raw_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
            current_statement__ = 1;
            for (int sym3__ = 1; sym3__ <= log_beta_raw_1dim__; ++sym3__) {
              current_statement__ = 1;
              assign(log_beta_raw,
                cons_list(index_uni(sym3__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list()))),
                log_beta_raw_flat__[(pos__ - 1)],
                "assigning variable log_beta_raw");
              current_statement__ = 1;
              pos__ = (pos__ + 1);}}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> eta_raw;
      eta_raw = std::vector<Eigen::Matrix<double, -1, 1>>(eta_raw_1dim__, Eigen::Matrix<double, -1, 1>(num_inter));
      stan::math::fill(eta_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> eta_raw_flat__;
        current_statement__ = 2;
        assign(eta_raw_flat__, nil_index_list(), context__.vals_r("eta_raw"),
          "assigning variable eta_raw_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= eta_raw_1dim__; ++sym2__) {
            current_statement__ = 2;
            assign(eta_raw,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              eta_raw_flat__[(pos__ - 1)], "assigning variable eta_raw");
            current_statement__ = 2;
            pos__ = (pos__ + 1);}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> mu_log_beta;
      mu_log_beta = std::vector<Eigen::Matrix<double, -1, 1>>(num_comp, Eigen::Matrix<double, -1, 1>(2));
      stan::math::fill(mu_log_beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mu_log_beta_flat__;
        current_statement__ = 3;
        assign(mu_log_beta_flat__, nil_index_list(),
          context__.vals_r("mu_log_beta"),
          "assigning variable mu_log_beta_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
            current_statement__ = 3;
            assign(mu_log_beta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              mu_log_beta_flat__[(pos__ - 1)],
              "assigning variable mu_log_beta");
            current_statement__ = 3;
            pos__ = (pos__ + 1);}}
      }
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> tau_log_beta_raw;
      tau_log_beta_raw = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(num_strata, std::vector<Eigen::Matrix<double, -1, 1>>(num_comp, Eigen::Matrix<double, -1, 1>(2)));
      stan::math::fill(tau_log_beta_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tau_log_beta_raw_flat__;
        current_statement__ = 4;
        assign(tau_log_beta_raw_flat__, nil_index_list(),
          context__.vals_r("tau_log_beta_raw"),
          "assigning variable tau_log_beta_raw_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
            current_statement__ = 4;
            for (int sym3__ = 1; sym3__ <= num_strata; ++sym3__) {
              current_statement__ = 4;
              assign(tau_log_beta_raw,
                cons_list(index_uni(sym3__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list()))),
                tau_log_beta_raw_flat__[(pos__ - 1)],
                "assigning variable tau_log_beta_raw");
              current_statement__ = 4;
              pos__ = (pos__ + 1);}}}
      }
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          current_statement__ = 4;
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            current_statement__ = 4;
            assign(tau_log_beta_raw,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym3__), nil_index_list()))),
              stan::math::lb_free(
                tau_log_beta_raw[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)], 0),
              "assigning variable tau_log_beta_raw");}}}
      std::vector<Eigen::Matrix<double, -1, -1>> L_corr_log_beta;
      L_corr_log_beta = std::vector<Eigen::Matrix<double, -1, -1>>(num_comp, Eigen::Matrix<double, -1, -1>(2, 2));
      stan::math::fill(L_corr_log_beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> L_corr_log_beta_flat__;
        current_statement__ = 5;
        assign(L_corr_log_beta_flat__, nil_index_list(),
          context__.vals_r("L_corr_log_beta"),
          "assigning variable L_corr_log_beta_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 5;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 5;
            for (int sym3__ = 1; sym3__ <= num_comp; ++sym3__) {
              current_statement__ = 5;
              assign(L_corr_log_beta,
                cons_list(index_uni(sym3__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list()))),
                L_corr_log_beta_flat__[(pos__ - 1)],
                "assigning variable L_corr_log_beta");
              current_statement__ = 5;
              pos__ = (pos__ + 1);}}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> L_corr_log_beta_free__;
      L_corr_log_beta_free__ = std::vector<Eigen::Matrix<double, -1, 1>>(num_comp, Eigen::Matrix<double, -1, 1>(
        ((2 * (2 - 1)) / 2)));
      stan::math::fill(L_corr_log_beta_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        current_statement__ = 5;
        assign(L_corr_log_beta_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::cholesky_corr_free(L_corr_log_beta[(sym1__ - 1)]),
          "assigning variable L_corr_log_beta_free__");}
      Eigen::Matrix<double, -1, 1> mu_eta;
      mu_eta = Eigen::Matrix<double, -1, 1>(num_inter);
      stan::math::fill(mu_eta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mu_eta_flat__;
        current_statement__ = 6;
        assign(mu_eta_flat__, nil_index_list(), context__.vals_r("mu_eta"),
          "assigning variable mu_eta_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
          current_statement__ = 6;
          assign(mu_eta, cons_list(index_uni(sym1__), nil_index_list()),
            mu_eta_flat__[(pos__ - 1)], "assigning variable mu_eta");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> tau_eta_raw;
      tau_eta_raw = std::vector<Eigen::Matrix<double, -1, 1>>(num_strata, Eigen::Matrix<double, -1, 1>(num_inter));
      stan::math::fill(tau_eta_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tau_eta_raw_flat__;
        current_statement__ = 7;
        assign(tau_eta_raw_flat__, nil_index_list(),
          context__.vals_r("tau_eta_raw"),
          "assigning variable tau_eta_raw_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= num_strata; ++sym2__) {
            current_statement__ = 7;
            assign(tau_eta_raw,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              tau_eta_raw_flat__[(pos__ - 1)],
              "assigning variable tau_eta_raw");
            current_statement__ = 7;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= num_inter; ++sym2__) {
          current_statement__ = 7;
          assign(tau_eta_raw,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lb_free(tau_eta_raw[(sym1__ - 1)][(sym2__ - 1)], 0),
            "assigning variable tau_eta_raw");}}
      Eigen::Matrix<double, -1, -1> L_corr_eta;
      L_corr_eta = Eigen::Matrix<double, -1, -1>(num_inter, num_inter);
      stan::math::fill(L_corr_eta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> L_corr_eta_flat__;
        current_statement__ = 8;
        assign(L_corr_eta_flat__, nil_index_list(),
          context__.vals_r("L_corr_eta"),
          "assigning variable L_corr_eta_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
          current_statement__ = 8;
          for (int sym2__ = 1; sym2__ <= num_inter; ++sym2__) {
            current_statement__ = 8;
            assign(L_corr_eta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              L_corr_eta_flat__[(pos__ - 1)], "assigning variable L_corr_eta");
            current_statement__ = 8;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> L_corr_eta_free__;
      L_corr_eta_free__ = Eigen::Matrix<double, -1, 1>(((num_inter *
                                                          (num_inter - 1)) /
                                                         2));
      stan::math::fill(L_corr_eta_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      assign(L_corr_eta_free__, nil_index_list(),
        stan::math::cholesky_corr_free(L_corr_eta),
        "assigning variable L_corr_eta_free__");
      for (int sym1__ = 1; sym1__ <= log_beta_raw_1dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            vars__.emplace_back(
              log_beta_raw[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);}}}
      for (int sym1__ = 1; sym1__ <= eta_raw_1dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_inter; ++sym2__) {
          vars__.emplace_back(eta_raw[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          vars__.emplace_back(mu_log_beta[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            vars__.emplace_back(
              tau_log_beta_raw[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);}}}
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ((2 * (2 - 1)) / 2); ++sym2__) {
          vars__.emplace_back(
            L_corr_log_beta_free__[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        vars__.emplace_back(mu_eta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_inter; ++sym2__) {
          vars__.emplace_back(tau_eta_raw[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= ((num_inter * (num_inter - 1)) / 2);
           ++sym1__) { vars__.emplace_back(L_corr_eta_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("log_beta_raw");
    names__.emplace_back("eta_raw");
    names__.emplace_back("mu_log_beta");
    names__.emplace_back("tau_log_beta_raw");
    names__.emplace_back("L_corr_log_beta");
    names__.emplace_back("mu_eta");
    names__.emplace_back("tau_eta_raw");
    names__.emplace_back("L_corr_eta");
    names__.emplace_back("beta");
    names__.emplace_back("eta");
    names__.emplace_back("tau_log_beta");
    names__.emplace_back("tau_eta");
    names__.emplace_back("beta_EX_prob");
    names__.emplace_back("eta_EX_prob");
    names__.emplace_back("beta_group");
    names__.emplace_back("eta_group");
    names__.emplace_back("log_lik_group");
    names__.emplace_back("rho_log_beta");
    names__.emplace_back("Sigma_corr_eta");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const
    final {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(log_beta_raw_1dim__)
                                             , static_cast<size_t>(num_comp),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(eta_raw_1dim__)
                                             , static_cast<size_t>(num_inter)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_comp),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_strata),
                                             static_cast<size_t>(num_comp),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_comp),
                                             static_cast<size_t>(2),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_inter)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_strata),
                                             static_cast<size_t>(num_inter)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_inter),
                                             static_cast<size_t>(num_inter)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(beta_1dim__)
                                             , static_cast<size_t>(num_comp),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(eta_1dim__),
                                             static_cast<size_t>(num_inter)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_strata),
                                             static_cast<size_t>(num_comp),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_strata),
                                             static_cast<size_t>(num_inter)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_groups),
                                             static_cast<size_t>(num_comp)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_groups),
                                             static_cast<size_t>(num_inter)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_groups),
                                             static_cast<size_t>(num_comp),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_groups),
                                             static_cast<size_t>(num_inter)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_groups)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_comp)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_inter),
                                             static_cast<size_t>(num_inter)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= log_beta_raw_1dim__; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "log_beta_raw" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              }}
          }}
      }}
    for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= eta_raw_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "eta_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "mu_log_beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= num_strata; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "tau_log_beta_raw" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              }}
          }}
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= num_comp; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "L_corr_log_beta" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              }}
          }}
      }}
    for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_eta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= num_strata; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "tau_eta_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= num_inter; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L_corr_eta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= beta_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= eta_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= num_strata; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tau_log_beta" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= num_strata; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tau_eta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= num_groups; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_EX_prob" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= num_groups; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "eta_EX_prob" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= num_groups; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "beta_group" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= num_groups; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "eta_group" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= num_groups; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_group" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "rho_log_beta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= num_inter; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_corr_eta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= log_beta_raw_1dim__; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "log_beta_raw" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              }}
          }}
      }}
    for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= eta_raw_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "eta_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "mu_log_beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= num_strata; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "tau_log_beta_raw" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              }}
          }}
      }}
    for (int sym1__ = 1; sym1__ <= ((2 * (2 - 1)) / 2); ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L_corr_log_beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_eta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= num_strata; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "tau_eta_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= ((num_inter * (num_inter - 1)) / 2);
         ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L_corr_eta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= beta_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= eta_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= num_strata; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tau_log_beta" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= num_strata; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tau_eta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= num_groups; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_EX_prob" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= num_groups; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "eta_EX_prob" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= num_comp; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= num_groups; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "beta_group" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= num_groups; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "eta_group" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= num_groups; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_group" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= num_comp; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "rho_log_beta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= num_inter; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= num_inter; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_corr_eta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"log_beta_raw\",\"type\":{\"name\":\"array\",\"length\":" << log_beta_raw_1dim__ << ",\"element_type\":{\"name\":\"array\",\"length\":" << num_comp << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}}},\"block\":\"parameters\"},{\"name\":\"eta_raw\",\"type\":{\"name\":\"array\",\"length\":" << eta_raw_1dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << num_inter << "}},\"block\":\"parameters\"},{\"name\":\"mu_log_beta\",\"type\":{\"name\":\"array\",\"length\":" << num_comp << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}},\"block\":\"parameters\"},{\"name\":\"tau_log_beta_raw\",\"type\":{\"name\":\"array\",\"length\":" << num_strata << ",\"element_type\":{\"name\":\"array\",\"length\":" << num_comp << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}}},\"block\":\"parameters\"},{\"name\":\"L_corr_log_beta\",\"type\":{\"name\":\"array\",\"length\":" << num_comp << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 2 << ",\"cols\":" << 2 << "}},\"block\":\"parameters\"},{\"name\":\"mu_eta\",\"type\":{\"name\":\"vector\",\"length\":" << num_inter << "},\"block\":\"parameters\"},{\"name\":\"tau_eta_raw\",\"type\":{\"name\":\"array\",\"length\":" << num_strata << ",\"element_type\":{\"name\":\"vector\",\"length\":" << num_inter << "}},\"block\":\"parameters\"},{\"name\":\"L_corr_eta\",\"type\":{\"name\":\"matrix\",\"rows\":" << num_inter << ",\"cols\":" << num_inter << "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" << beta_1dim__ << ",\"element_type\":{\"name\":\"array\",\"length\":" << num_comp << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}}},\"block\":\"transformed_parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"array\",\"length\":" << eta_1dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << num_inter << "}},\"block\":\"transformed_parameters\"},{\"name\":\"tau_log_beta\",\"type\":{\"name\":\"array\",\"length\":" << num_strata << ",\"element_type\":{\"name\":\"array\",\"length\":" << num_comp << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tau_eta\",\"type\":{\"name\":\"array\",\"length\":" << num_strata << ",\"element_type\":{\"name\":\"vector\",\"length\":" << num_inter << "}},\"block\":\"transformed_parameters\"},{\"name\":\"beta_EX_prob\",\"type\":{\"name\":\"matrix\",\"rows\":" << num_groups << ",\"cols\":" << num_comp << "},\"block\":\"generated_quantities\"},{\"name\":\"eta_EX_prob\",\"type\":{\"name\":\"matrix\",\"rows\":" << num_groups << ",\"cols\":" << num_inter << "},\"block\":\"generated_quantities\"},{\"name\":\"beta_group\",\"type\":{\"name\":\"array\",\"length\":" << num_groups << ",\"element_type\":{\"name\":\"array\",\"length\":" << num_comp << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}}},\"block\":\"generated_quantities\"},{\"name\":\"eta_group\",\"type\":{\"name\":\"array\",\"length\":" << num_groups << ",\"element_type\":{\"name\":\"vector\",\"length\":" << num_inter << "}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_group\",\"type\":{\"name\":\"vector\",\"length\":" << num_groups << "},\"block\":\"generated_quantities\"},{\"name\":\"rho_log_beta\",\"type\":{\"name\":\"vector\",\"length\":" << num_comp << "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma_corr_eta\",\"type\":{\"name\":\"matrix\",\"rows\":" << num_inter << ",\"cols\":" << num_inter << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"log_beta_raw\",\"type\":{\"name\":\"array\",\"length\":" << log_beta_raw_1dim__ << ",\"element_type\":{\"name\":\"array\",\"length\":" << num_comp << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}}},\"block\":\"parameters\"},{\"name\":\"eta_raw\",\"type\":{\"name\":\"array\",\"length\":" << eta_raw_1dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << num_inter << "}},\"block\":\"parameters\"},{\"name\":\"mu_log_beta\",\"type\":{\"name\":\"array\",\"length\":" << num_comp << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}},\"block\":\"parameters\"},{\"name\":\"tau_log_beta_raw\",\"type\":{\"name\":\"array\",\"length\":" << num_strata << ",\"element_type\":{\"name\":\"array\",\"length\":" << num_comp << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}}},\"block\":\"parameters\"},{\"name\":\"L_corr_log_beta\",\"type\":{\"name\":\"array\",\"length\":" << num_comp << ",\"element_type\":{\"name\":\"vector\",\"length\":" << ((2 * (2 - 1)) / 2) << "}},\"block\":\"parameters\"},{\"name\":\"mu_eta\",\"type\":{\"name\":\"vector\",\"length\":" << num_inter << "},\"block\":\"parameters\"},{\"name\":\"tau_eta_raw\",\"type\":{\"name\":\"array\",\"length\":" << num_strata << ",\"element_type\":{\"name\":\"vector\",\"length\":" << num_inter << "}},\"block\":\"parameters\"},{\"name\":\"L_corr_eta\",\"type\":{\"name\":\"vector\",\"length\":" << ((num_inter * (num_inter - 1)) / 2) << "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" << beta_1dim__ << ",\"element_type\":{\"name\":\"array\",\"length\":" << num_comp << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}}},\"block\":\"transformed_parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"array\",\"length\":" << eta_1dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << num_inter << "}},\"block\":\"transformed_parameters\"},{\"name\":\"tau_log_beta\",\"type\":{\"name\":\"array\",\"length\":" << num_strata << ",\"element_type\":{\"name\":\"array\",\"length\":" << num_comp << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tau_eta\",\"type\":{\"name\":\"array\",\"length\":" << num_strata << ",\"element_type\":{\"name\":\"vector\",\"length\":" << num_inter << "}},\"block\":\"transformed_parameters\"},{\"name\":\"beta_EX_prob\",\"type\":{\"name\":\"matrix\",\"rows\":" << num_groups << ",\"cols\":" << num_comp << "},\"block\":\"generated_quantities\"},{\"name\":\"eta_EX_prob\",\"type\":{\"name\":\"matrix\",\"rows\":" << num_groups << ",\"cols\":" << num_inter << "},\"block\":\"generated_quantities\"},{\"name\":\"beta_group\",\"type\":{\"name\":\"array\",\"length\":" << num_groups << ",\"element_type\":{\"name\":\"array\",\"length\":" << num_comp << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}}},\"block\":\"generated_quantities\"},{\"name\":\"eta_group\",\"type\":{\"name\":\"array\",\"length\":" << num_groups << ",\"element_type\":{\"name\":\"vector\",\"length\":" << num_inter << "}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_group\",\"type\":{\"name\":\"vector\",\"length\":" << num_groups << "},\"block\":\"generated_quantities\"},{\"name\":\"rho_log_beta\",\"type\":{\"name\":\"vector\",\"length\":" << num_comp << "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma_corr_eta\",\"type\":{\"name\":\"matrix\",\"rows\":" << num_inter << ",\"cols\":" << num_inter << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = nullptr) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = nullptr) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__ = nullptr) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
using stan_model = blrm_exnex_model_namespace::blrm_exnex_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


